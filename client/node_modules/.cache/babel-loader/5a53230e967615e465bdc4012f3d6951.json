{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\chatapp\\\\client\\\\src\\\\Pages\\\\LiveChat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport socketIOClient from 'socket.io-client';\nimport { getRoomChat, afterPostMessage } from '../redux/conversations/actions';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction LiveChat() {\n  _s();\n\n  let socket;\n  const [message, setMessage] = useState('');\n  const [typing, setTyping] = useState(false);\n  const {\n    messages,\n    members,\n    loading,\n    error,\n    name2,\n    currentRoom\n  } = useSelector(state => state.conversations);\n  const {\n    user\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const userId = localStorage.getItem('userId');\n  const name = localStorage.getItem('userName');\n  const chatroomId = currentRoom;\n  useEffect(() => {\n    socket = socketIOClient.connect(\"http://localhost:5000\");\n    console.log('socket', socket);\n\n    if (socket) {\n      socket.emit(\"joinRoom\", {\n        chatroomId,\n        userId\n      });\n      socket.on(\"newMessage\", ({\n        newMessage\n      }) => {\n        dispatch(afterPostMessage(newMessage));\n      });\n      socket.on(\"typing\", user => {\n        setTyping(`${user} is typing...`);\n      });\n      socket.emit(\"joinRoom\", {\n        chatroomId,\n        userId\n      });\n    }\n\n    return () => {\n      //Component Unmount\n      if (socket) {\n        socket.emit(\"leaveRoom\", {\n          chatroomId\n        });\n      }\n    };\n  }, []);\n  useEffect(() => {\n    setTimeout(() => {\n      setTyping(false);\n    }, 5000);\n  }, [typing]);\n\n  const sendUserAction = e => {\n    const user = localStorage.getItem('userName');\n    setMessage(e.target.value);\n\n    if (socket) {\n      socket.emit('typing', user);\n    }\n  };\n\n  const sendMessage = () => {\n    const chatMessage = {\n      chatroomId: currentRoom,\n      message: {\n        userId: localStorage.getItem('userId'),\n        name,\n        content: message,\n        date: Date.now()\n      },\n      userId: localStorage.getItem('userId')\n    };\n\n    if (socket) {\n      socket.emit(\"chatroomMessage\", chatMessage);\n      setMessage(\"\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(\"li\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"li\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 23\n    }, this), name && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 22\n    }, this), typing && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: typing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 24\n    }, this), messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"there is no conversations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 38\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatroomContent\",\n      children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: ' ' === message.userId ? \"ownMessage\" : \"otherMessage\",\n          children: [message.userId === '' ? message.viewers === true ? 'VV  ' : 'V ' : '', message.name, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this), \" \", message.content]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 74\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatroomActions\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"message\",\n          placeholder: \"Say something!\",\n          onChange: sendUserAction,\n          value: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"join\",\n          onClick: sendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(LiveChat, \"1eNsT76EFsWxjT7BK2mdeuqapnE=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = LiveChat;\nexport default LiveChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"LiveChat\");","map":{"version":3,"sources":["C:/Users/User/Documents/chatapp/client/src/Pages/LiveChat.js"],"names":["React","useState","useEffect","io","socketIOClient","getRoomChat","afterPostMessage","connect","useSelector","useDispatch","LiveChat","socket","message","setMessage","typing","setTyping","messages","members","loading","error","name2","currentRoom","state","conversations","user","dispatch","userId","localStorage","getItem","name","chatroomId","console","log","emit","on","newMessage","setTimeout","sendUserAction","e","target","value","sendMessage","chatMessage","content","date","Date","now","length","map","i","viewers"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport io from 'socket.io-client'\r\nimport socketIOClient from 'socket.io-client'\r\nimport { getRoomChat, afterPostMessage } from '../redux/conversations/actions'\r\nimport { connect, useSelector, useDispatch } from 'react-redux'\r\nfunction LiveChat() {\r\n    let socket\r\n    const [message, setMessage] = useState('')\r\n    const [typing, setTyping] = useState(false)\r\n    const { messages, members, loading, error, name2, currentRoom } = useSelector(state => state.conversations)\r\n    const { user } = useSelector(state => state.user)\r\n    const dispatch = useDispatch()\r\n    const userId = localStorage.getItem('userId')\r\n    const name = localStorage.getItem('userName')\r\n    const chatroomId = currentRoom\r\n\r\n    useEffect(() => {\r\n        socket = socketIOClient.connect(\"http://localhost:5000\");\r\n        console.log('socket', socket)\r\n        if (socket) {\r\n            socket.emit(\"joinRoom\", {\r\n                chatroomId, userId\r\n            });\r\n\r\n            socket.on(\"newMessage\", ({ newMessage }) => {\r\n                dispatch(afterPostMessage(newMessage))\r\n            });\r\n            socket.on(\"typing\", user => {\r\n                setTyping(`${user} is typing...`)\r\n            })\r\n            socket.emit(\"joinRoom\", {\r\n                chatroomId, userId\r\n            });\r\n\r\n        }\r\n        return () => {\r\n            //Component Unmount\r\n            if (socket) {\r\n                socket.emit(\"leaveRoom\", {\r\n                    chatroomId,\r\n                });\r\n            }\r\n        };\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        setTimeout(() => {\r\n            setTyping(false)\r\n        }, 5000)\r\n    }, [typing])\r\n\r\n    const sendUserAction = (e) => {\r\n        const user = localStorage.getItem('userName')\r\n        setMessage(e.target.value)\r\n        if (socket) {\r\n            socket.emit('typing', user)\r\n        }\r\n    }\r\n    const sendMessage = () => {\r\n        const chatMessage = {\r\n            chatroomId: currentRoom,\r\n            message: { userId: localStorage.getItem('userId'), name, content: message, date: Date.now() },\r\n            userId: localStorage.getItem('userId')\r\n        }\r\n        if (socket) {\r\n            socket.emit(\"chatroomMessage\", chatMessage);\r\n\r\n            setMessage(\"\");\r\n\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            {loading && <li>loading</li>}\r\n            {error && <li>{error}</li>}\r\n            {name && <h2>{name}</h2>}\r\n            {typing && <p>{typing}</p>}\r\n            {messages.length === 0 ? <p>there is no conversations</p> : (<div className=\"chatroomContent\">\r\n                {messages.map((message, i) => (\r\n\r\n                    <div key={i} className=\"message\">\r\n                        <span\r\n                            className={\r\n                                ' ' === message.userId ? \"ownMessage\" : \"otherMessage\"\r\n                            }\r\n                        >\r\n                            {message.userId === '' ? message.viewers === true ? 'VV  ' : 'V ' : ''}\r\n                            {message.name}:\r\n                        </span>{\" \"}\r\n                        {message.content}\r\n                    </div>\r\n                ))}\r\n            </div>)}\r\n            <div className=\"chatroomActions\">\r\n                <div>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"message\"\r\n                        placeholder=\"Say something!\"\r\n                        onChange={sendUserAction}\r\n                        value={message}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button className=\"join\" onClick={sendMessage}>\r\n                        Send\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LiveChat\r\n"]},"metadata":{},"sourceType":"module"}