{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\chatapp\\\\client\\\\src\\\\pages\\\\chat\\\\MessageForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react'; // import { SendOutlined, PictureOutlined } from '@ant-design/icons';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport axios from 'axios';\nimport { io } from \"socket.io-client\";\nimport { afterPostMessage } from '../../redux/conversations/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isTyping = () => {};\n\nconst MessageForm = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  localStorage.debug = '*';\n  const socket = io('http://localhost:5000');\n  const [value, setValue] = useState('');\n  const {\n    chatId,\n    creds\n  } = props;\n  const {\n    currentRoom: chatroomId,\n    messages\n  } = useSelector(state => state.conversations);\n  console.log('current', messages);\n\n  const handleChange = event => {\n    setValue(event.target.value);\n    isTyping(props, chatId);\n    socket.emit('typing', {\n      name: 'basha'\n    });\n  };\n\n  useEffect(() => {\n    socket.emit('joinRoom', {\n      chatroomId,\n      userId\n    });\n    return () => {};\n  }, []);\n  useEffect(() => {\n    if (socket) {\n      socket.on(\"newMessage\", ({\n        newMessage\n      }) => {\n        console.log('recieved from the server', newMessage);\n        dispatch(afterPostMessage(newMessage));\n      });\n      socket.on(\"typing\", user => {\n        // setTyping(`${user} is typing...`)\n        console.log('typing');\n      });\n    }\n  }, [messages]);\n\n  const sendMessage = e => {\n    e.preventDefault();\n    const chatMessage = {\n      chatroomId,\n      message: {\n        userId: localStorage.getItem('userId'),\n        content: value,\n        date: Date.now()\n      },\n      userId: localStorage.getItem('userId')\n    };\n\n    if (socket) {\n      socket.emit(\"chatroomMessage\", chatMessage);\n      setValue(\"\");\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const text = value.trim();\n\n    if (text.length > 0) {\n      sendMessage(creds, chatId, {\n        text\n      });\n    }\n\n    setValue('');\n  };\n\n  const handleUpload = event => {\n    sendMessage(creds, chatId, {\n      files: event.target.files,\n      text: ''\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"message-form\",\n    onSubmit: sendMessage,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"message-input\",\n      placeholder: \"Send a message...\",\n      value: value,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"upload-button\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"image-button\",\n        children: \"picture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      multiple: false,\n      id: \"upload-button\",\n      style: {\n        display: 'none'\n      },\n      onChange: handleUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"send-button\",\n      children: \"send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MessageForm, \"YDdDAyVP4RJvrir5/gSLMVNCvys=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = MessageForm;\nexport default MessageForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageForm\");","map":{"version":3,"sources":["C:/Users/User/Documents/chatapp/client/src/pages/chat/MessageForm.jsx"],"names":["useState","useEffect","useSelector","useDispatch","axios","io","afterPostMessage","isTyping","MessageForm","props","dispatch","localStorage","debug","socket","value","setValue","chatId","creds","currentRoom","chatroomId","messages","state","conversations","console","log","handleChange","event","target","emit","name","userId","on","newMessage","user","sendMessage","e","preventDefault","chatMessage","message","getItem","content","date","Date","now","handleSubmit","text","trim","length","handleUpload","files","display"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\n// import { SendOutlined, PictureOutlined } from '@ant-design/icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport axios from 'axios';\r\nimport { io } from \"socket.io-client\";\r\nimport { afterPostMessage } from '../../redux/conversations/actions'\r\nconst isTyping = () => { }\r\nconst MessageForm = (props) => {\r\n    const dispatch = useDispatch()\r\n    localStorage.debug = '*';\r\n    const socket = io('http://localhost:5000')\r\n    const [value, setValue] = useState('');\r\n    const { chatId, creds } = props;\r\n    const { currentRoom:chatroomId, messages } = useSelector(state => state.conversations)\r\n    console.log('current', messages)\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n        isTyping(props, chatId);\r\n        socket.emit('typing', { name: 'basha' })\r\n    };\r\n\r\n    useEffect(() => {\r\n        socket.emit('joinRoom', { chatroomId, userId })\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        if (socket) {\r\n            socket.on(\"newMessage\", ({ newMessage }) => {\r\n                console.log('recieved from the server', newMessage)\r\n                dispatch(afterPostMessage(newMessage))\r\n            });\r\n            socket.on(\"typing\", user => {\r\n                // setTyping(`${user} is typing...`)\r\n                console.log('typing')\r\n            })\r\n        }\r\n\r\n    }, [messages])\r\n    const sendMessage = (e) => {\r\n        e.preventDefault()\r\n        const chatMessage = {\r\n            chatroomId,\r\n            message: { userId: localStorage.getItem('userId'), content: value, date: Date.now() },\r\n            userId: localStorage.getItem('userId')\r\n        }\r\n        if (socket) {\r\n            socket.emit(\"chatroomMessage\", chatMessage);\r\n            setValue(\"\");\r\n        }\r\n    };\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const text = value.trim();\r\n\r\n        if (text.length > 0) {\r\n            sendMessage(creds, chatId, { text });\r\n        }\r\n\r\n        setValue('');\r\n    };\r\n\r\n    const handleUpload = (event) => {\r\n        sendMessage(creds, chatId, { files: event.target.files, text: '' });\r\n    };\r\n\r\n    return (\r\n        <form className=\"message-form\" onSubmit={sendMessage}>\r\n            <input\r\n                className=\"message-input\"\r\n                placeholder=\"Send a message...\"\r\n                value={value}\r\n                onChange={handleChange}\r\n\r\n            />\r\n            <label htmlFor=\"upload-button\">\r\n                <span className=\"image-button\">\r\n                    picture\r\n                </span>\r\n            </label>\r\n            <input\r\n                type=\"file\"\r\n                multiple={false}\r\n                id=\"upload-button\"\r\n                style={{ display: 'none' }}\r\n                onChange={handleUpload}\r\n            />\r\n            <button type=\"submit\" className=\"send-button\">\r\n                send\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default MessageForm;"]},"metadata":{},"sourceType":"module"}