{"ast":null,"code":"const axios = require('axios');\n\nconst {\n  FETCH_CONTACTS_REQUEST,\n  FETCH_CONTACTS_SUCCESS,\n  FETCH_CONTACTS_FAILURE,\n  ADD_USER,\n  SUCCESS\n} = require('./types');\n\nconst userId = localStorage.getItem('userId');\nexport const fetchUsers = () => {\n  return dispatch => {\n    dispatch(fetchUsersRequest());\n    axios.post('http://localhost:5000/api/contact', {\n      userId\n    }).then(response => {\n      const users = response.data;\n      const contacts = {};\n      users.forEach(item => {\n        contacts[item.userId] = item.name;\n      });\n      console.log('new users', contacts);\n      dispatch(fetchUsersSuccess(response.data));\n    }).catch(error => {\n      dispatch(fetchUsersFailure(error.message));\n    });\n  };\n};\nexport const appendToContacts = (name, id) => {\n  return dispatch => {\n    dispatch(fetchUsersRequest());\n    axios.post('http://localhost:5000/api/contact/add', {\n      id,\n      userId,\n      name\n    }).then(response => {});\n  };\n};\nexport const fetchUsersRequest = () => {\n  return {\n    type: FETCH_CONTACTS_REQUEST\n  };\n};\nexport const fetchUsersSuccess = users => {\n  return {\n    type: FETCH_CONTACTS_SUCCESS,\n    payload: users\n  };\n};\nexport const fetchUsersFailure = error => {\n  return {\n    type: FETCH_CONTACTS_FAILURE,\n    payload: error\n  };\n};\nexport const appendUser = user => {\n  return {\n    type: ADD_USER,\n    payload: user\n  };\n};\nexport const success = () => {\n  return {\n    type: ADD_USER,\n    payload: user\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Documents/chatapp/client/src/redux/contacts/actions.js"],"names":["axios","require","FETCH_CONTACTS_REQUEST","FETCH_CONTACTS_SUCCESS","FETCH_CONTACTS_FAILURE","ADD_USER","SUCCESS","userId","localStorage","getItem","fetchUsers","dispatch","fetchUsersRequest","post","then","response","users","data","contacts","forEach","item","name","console","log","fetchUsersSuccess","catch","error","fetchUsersFailure","message","appendToContacts","id","type","payload","appendUser","user","success"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAM;AAAEC,EAAAA,sBAAF;AAA0BC,EAAAA,sBAA1B;AAAkDC,EAAAA,sBAAlD;AAAyEC,EAAAA,QAAzE;AAAkFC,EAAAA;AAAlF,IAA8FL,OAAO,CAAC,SAAD,CAA3G;;AACA,MAAMM,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC5B,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACC,iBAAiB,EAAlB,CAAR;AACAZ,IAAAA,KAAK,CAACa,IAAN,CAAW,mCAAX,EAAgD;AAAEN,MAAAA;AAAF,KAAhD,EAA4DO,IAA5D,CAAiEC,QAAQ,IAAI;AACzE,YAAMC,KAAK,GAAGD,QAAQ,CAACE,IAAvB;AACA,YAAMC,QAAQ,GAAG,EAAjB;AACAF,MAAAA,KAAK,CAACG,OAAN,CAAcC,IAAI,IAAI;AAClBF,QAAAA,QAAQ,CAACE,IAAI,CAACb,MAAN,CAAR,GAAwBa,IAAI,CAACC,IAA7B;AACH,OAFD;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBL,QAAzB;AACAP,MAAAA,QAAQ,CAACa,iBAAiB,CAACT,QAAQ,CAACE,IAAV,CAAlB,CAAR;AACH,KARD,EAQGQ,KARH,CAQSC,KAAK,IAAI;AACdf,MAAAA,QAAQ,CAACgB,iBAAiB,CAACD,KAAK,CAACE,OAAP,CAAlB,CAAR;AACH,KAVD;AAWH,GAbD;AAcH,CAfM;AAkBP,OAAO,MAAMC,gBAAgB,GAAG,CAACR,IAAD,EAAOS,EAAP,KAAc;AAC1C,SAAOnB,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,iBAAiB,EAAlB,CAAR;AACAZ,IAAAA,KAAK,CAACa,IAAN,CAAW,uCAAX,EAAoD;AAAEiB,MAAAA,EAAF;AAAMvB,MAAAA,MAAN;AAAcc,MAAAA;AAAd,KAApD,EAA0EP,IAA1E,CAA+EC,QAAQ,IAAI,CAE1F,CAFD;AAGH,GALD;AAMH,CAPM;AAQP,OAAO,MAAMH,iBAAiB,GAAG,MAAM;AACnC,SAAO;AACHmB,IAAAA,IAAI,EAAE7B;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMsB,iBAAiB,GAAGR,KAAK,IAAI;AACtC,SAAO;AACHe,IAAAA,IAAI,EAAE5B,sBADH;AAEH6B,IAAAA,OAAO,EAAEhB;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMW,iBAAiB,GAAGD,KAAK,IAAI;AACtC,SAAO;AACHK,IAAAA,IAAI,EAAE3B,sBADH;AAEH4B,IAAAA,OAAO,EAAEN;AAFN,GAAP;AAIH,CALM;AAMP,OAAO,MAAMO,UAAU,GAAGC,IAAI,IAAI;AAC9B,SAAO;AACHH,IAAAA,IAAI,EAAE1B,QADH;AAEH2B,IAAAA,OAAO,EAAEE;AAFN,GAAP;AAIH,CALM;AAMP,OAAO,MAAMC,OAAO,GAAC,MAAI;AACrB,SAAO;AACHJ,IAAAA,IAAI,EAAE1B,QADH;AAEH2B,IAAAA,OAAO,EAAEE;AAFN,GAAP;AAIH,CALM","sourcesContent":["const axios = require('axios')\r\nconst { FETCH_CONTACTS_REQUEST, FETCH_CONTACTS_SUCCESS, FETCH_CONTACTS_FAILURE,ADD_USER,SUCCESS } = require('./types')\r\nconst userId = localStorage.getItem('userId')\r\n\r\nexport const fetchUsers = () => {\r\n    return (dispatch) => {\r\n        dispatch(fetchUsersRequest())\r\n        axios.post('http://localhost:5000/api/contact', { userId }).then(response => {\r\n            const users = response.data\r\n            const contacts = {}\r\n            users.forEach(item => {\r\n                contacts[item.userId] = item.name\r\n            })\r\n            console.log('new users', contacts)\r\n            dispatch(fetchUsersSuccess(response.data))\r\n        }).catch(error => {\r\n            dispatch(fetchUsersFailure(error.message))\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const appendToContacts = (name, id) => {\r\n    return dispatch => {\r\n        dispatch(fetchUsersRequest())\r\n        axios.post('http://localhost:5000/api/contact/add', { id, userId, name }).then(response => {\r\n\r\n        })\r\n    }\r\n}\r\nexport const fetchUsersRequest = () => {\r\n    return {\r\n        type: FETCH_CONTACTS_REQUEST\r\n    }\r\n}\r\n\r\nexport const fetchUsersSuccess = users => {\r\n    return {\r\n        type: FETCH_CONTACTS_SUCCESS,\r\n        payload: users\r\n    }\r\n}\r\n\r\nexport const fetchUsersFailure = error => {\r\n    return {\r\n        type: FETCH_CONTACTS_FAILURE,\r\n        payload: error\r\n    }\r\n}\r\nexport const appendUser = user => {\r\n    return {\r\n        type: ADD_USER,\r\n        payload: user\r\n    }\r\n}\r\nexport const success=()=>{\r\n    return {\r\n        type: ADD_USER,\r\n        payload: user\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}