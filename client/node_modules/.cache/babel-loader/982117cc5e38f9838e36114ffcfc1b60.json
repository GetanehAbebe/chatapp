{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\chatapp\\\\client\\\\src\\\\pages\\\\ChatRoomPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport socketIOClient from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  getRoomChat\n} = require('../DAL/index');\n\nlet socket;\nconst CONNECTION_PORT = \"http://localhost:5000\";\n\nconst ChatroomPage = ({\n  match\n}) => {\n  _s();\n\n  const chatroomId = match.params.id;\n  const [messages, setMessages] = React.useState([]);\n  const messageRef = React.useRef();\n  const [roomName, setRoomName] = React.useState('');\n  const [typing, setTyping] = React.useState(\"\");\n  const userId = localStorage.getItem('userId');\n  const name = localStorage.getItem('userName');\n  useEffect(async () => {\n    // socket = io(CONNECTION_PORT)\n    if (socket) {\n      socket.on(\"newMessage\", async ({\n        newMessage\n      }) => {\n        const getMessages = await getRoomChat(chatroomId);\n        setMessages(getMessages.messages);\n        socket.emit('watchMessage', {\n          chatroomId,\n          userId,\n          messageId: newMessage[\"_id\"]\n        });\n      });\n      socket.on(\"typing\", user => {\n        setTyping(`${user} is typing...`);\n      }); // socket.on(\"watchMessage\", async chatroomId => {\n      //     const getMessages = await getRoomChat(chatroomId)\n      //     setMessages(getMessages.messages)\n      //     console.log(messages)\n      // })\n    }\n  }, [messages]);\n\n  const sendMessage = () => {\n    if (socket) {\n      socket.emit(\"chatroomMessage\", {\n        chatroomId: chatroomId,\n        message: {\n          userId,\n          name,\n          content: messageRef.current.value,\n          date: Date.now()\n        },\n        userId: localStorage.getItem('userId')\n      });\n      messageRef.current.value = \"\";\n    }\n  };\n\n  const sendUserAction = () => {\n    if (socket) {\n      socket.emit('typing', {\n        name\n      });\n    }\n  };\n\n  React.useEffect(async () => {\n    socket = socketIOClient(\"http://localhost:5000\");\n    const getMessages = await getRoomChat(chatroomId);\n    setMessages(getMessages.messages);\n    setRoomName(getMessages.name);\n\n    if (socket) {\n      socket.emit(\"joinRoom\", {\n        chatroomId,\n        userId\n      });\n    }\n\n    return () => {\n      //Component Unmount\n      if (socket) {\n        socket.emit(\"leaveRoom\", {\n          chatroomId\n        });\n      }\n    };\n  }, []);\n  useEffect(() => {\n    setTimeout(() => {\n      setTyping('');\n    }, 5000);\n  }, [typing]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chatroomPage\",\n    children: [typing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typind\",\n      children: typing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatroomSection\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cardHeader\",\n        children: roomName ? roomName : 'Chatroom Name'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatroomContent\",\n        children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: userId === message.userId ? \"ownMessage\" : \"otherMessage\",\n            children: [message.userId === userId ? message.viewers === true ? 'VV  ' : 'V ' : '', message.name, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 29\n          }, this), \" \", message.content]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatroomActions\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"message\",\n            placeholder: \"Say something!\",\n            onChange: sendUserAction,\n            ref: messageRef,\n            onUnFocuced: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"join\",\n            onClick: sendMessage,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatroomPage, \"0u7otjUXdvQpOLYl7SvgTwjPk8Q=\");\n\n_c = ChatroomPage;\nexport default _c2 = withRouter(ChatroomPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChatroomPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/User/Documents/chatapp/client/src/pages/ChatRoomPage.jsx"],"names":["React","useEffect","withRouter","io","socketIOClient","getRoomChat","require","socket","CONNECTION_PORT","ChatroomPage","match","chatroomId","params","id","messages","setMessages","useState","messageRef","useRef","roomName","setRoomName","typing","setTyping","userId","localStorage","getItem","name","on","newMessage","getMessages","emit","messageId","user","sendMessage","message","content","current","value","date","Date","now","sendUserAction","setTimeout","map","i","viewers"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAkBC,OAAO,CAAC,cAAD,CAA/B;;AACA,IAAIC,MAAJ;AACA,MAAMC,eAAe,GAAG,uBAAxB;;AACA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAAA;;AAChC,QAAMC,UAAU,GAAGD,KAAK,CAACE,MAAN,CAAaC,EAAhC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bf,KAAK,CAACgB,QAAN,CAAe,EAAf,CAAhC;AACA,QAAMC,UAAU,GAAGjB,KAAK,CAACkB,MAAN,EAAnB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BpB,KAAK,CAACgB,QAAN,CAAe,EAAf,CAAhC;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBtB,KAAK,CAACgB,QAAN,CAAe,EAAf,CAA5B;AACA,QAAMO,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf;AACA,QAAMC,IAAI,GAAGF,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAb;AACAxB,EAAAA,SAAS,CAAC,YAAY;AAClB;AACA,QAAIM,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACoB,EAAP,CAAU,YAAV,EAAwB,OAAO;AAAEC,QAAAA;AAAF,OAAP,KAA0B;AAC9C,cAAMC,WAAW,GAAG,MAAMxB,WAAW,CAACM,UAAD,CAArC;AACAI,QAAAA,WAAW,CAACc,WAAW,CAACf,QAAb,CAAX;AACAP,QAAAA,MAAM,CAACuB,IAAP,CAAY,cAAZ,EAA4B;AACxBnB,UAAAA,UADwB;AACZY,UAAAA,MADY;AACJQ,UAAAA,SAAS,EAAEH,UAAU,CAAC,KAAD;AADjB,SAA5B;AAGH,OAND;AAOArB,MAAAA,MAAM,CAACoB,EAAP,CAAU,QAAV,EAAoBK,IAAI,IAAI;AACxBV,QAAAA,SAAS,CAAE,GAAEU,IAAK,eAAT,CAAT;AACH,OAFD,EARQ,CAWR;AACA;AACA;AACA;AACA;AACH;AACJ,GAnBQ,EAmBN,CAAClB,QAAD,CAnBM,CAAT;;AAoBA,QAAMmB,WAAW,GAAG,MAAM;AACtB,QAAI1B,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACuB,IAAP,CAAY,iBAAZ,EAA+B;AAC3BnB,QAAAA,UAAU,EAAEA,UADe;AAE3BuB,QAAAA,OAAO,EAAE;AAAEX,UAAAA,MAAF;AAAUG,UAAAA,IAAV;AAAgBS,UAAAA,OAAO,EAAElB,UAAU,CAACmB,OAAX,CAAmBC,KAA5C;AAAmDC,UAAAA,IAAI,EAAEC,IAAI,CAACC,GAAL;AAAzD,SAFkB;AAG3BjB,QAAAA,MAAM,EAAEC,YAAY,CAACC,OAAb,CAAqB,QAArB;AAHmB,OAA/B;AAKAR,MAAAA,UAAU,CAACmB,OAAX,CAAmBC,KAAnB,GAA2B,EAA3B;AACH;AACJ,GATD;;AAWA,QAAMI,cAAc,GAAG,MAAM;AACzB,QAAIlC,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACuB,IAAP,CAAY,QAAZ,EAAsB;AAClBJ,QAAAA;AADkB,OAAtB;AAGH;AACJ,GAND;;AAQA1B,EAAAA,KAAK,CAACC,SAAN,CAAgB,YAAY;AACxBM,IAAAA,MAAM,GAAGH,cAAc,CAAC,uBAAD,CAAvB;AACA,UAAMyB,WAAW,GAAG,MAAMxB,WAAW,CAACM,UAAD,CAArC;AACAI,IAAAA,WAAW,CAACc,WAAW,CAACf,QAAb,CAAX;AACAM,IAAAA,WAAW,CAACS,WAAW,CAACH,IAAb,CAAX;;AACA,QAAInB,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACuB,IAAP,CAAY,UAAZ,EAAwB;AACpBnB,QAAAA,UADoB;AACRY,QAAAA;AADQ,OAAxB;AAGH;;AAED,WAAO,MAAM;AACT;AACA,UAAIhB,MAAJ,EAAY;AACRA,QAAAA,MAAM,CAACuB,IAAP,CAAY,WAAZ,EAAyB;AACrBnB,UAAAA;AADqB,SAAzB;AAGH;AACJ,KAPD;AASH,GApBD,EAoBG,EApBH;AAqBAV,EAAAA,SAAS,CAAC,MAAM;AACZyC,IAAAA,UAAU,CAAC,MAAM;AACbpB,MAAAA,SAAS,CAAC,EAAD,CAAT;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GAJQ,EAIN,CAACD,MAAD,CAJM,CAAT;AAMA,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,eACKA,MAAM,iBAAI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,gBAAyBA;AAAzB;AAAA;AAAA;AAAA;AAAA,YADf,eAEI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,kBAA6BF,QAAQ,GAAGA,QAAH,GAAc;AAAnD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,kBACKL,QAAQ,CAAC6B,GAAT,CAAa,CAACT,OAAD,EAAUU,CAAV,kBAEV;AAAa,UAAA,SAAS,EAAC,SAAvB;AAAA,kCACI;AACI,YAAA,SAAS,EACLrB,MAAM,KAAKW,OAAO,CAACX,MAAnB,GAA4B,YAA5B,GAA2C,cAFnD;AAAA,uBAKKW,OAAO,CAACX,MAAR,KAAmBA,MAAnB,GAA4BW,OAAO,CAACW,OAAR,KAAoB,IAApB,GAA2B,MAA3B,GAAoC,IAAhE,GAAuE,EAL5E,EAMKX,OAAO,CAACR,IANb;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAQY,GARZ,EASKQ,OAAO,CAACC,OATb;AAAA,WAAUS,CAAV;AAAA;AAAA;AAAA;AAAA,gBAFH;AADL;AAAA;AAAA;AAAA;AAAA,cAFJ,eAkBI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACI;AAAA,iCACI;AACI,YAAA,IAAI,EAAC,MADT;AAEI,YAAA,IAAI,EAAC,SAFT;AAGI,YAAA,WAAW,EAAC,gBAHhB;AAII,YAAA,QAAQ,EAAEH,cAJd;AAKI,YAAA,GAAG,EAAExB,UALT;AAMI,YAAA,WAAW;AANf;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAWI;AAAA,iCACI;AAAQ,YAAA,SAAS,EAAC,MAAlB;AAAyB,YAAA,OAAO,EAAEgB,WAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyCH,CAnHD;;GAAMxB,Y;;KAAAA,Y;AAqHN,qBAAeP,UAAU,CAACO,YAAD,CAAzB","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport io from \"socket.io-client\";\r\n\r\nimport socketIOClient from 'socket.io-client'\r\nconst { getRoomChat } = require('../DAL/index')\r\nlet socket;\r\nconst CONNECTION_PORT = \"http://localhost:5000\";\r\nconst ChatroomPage = ({ match }) => {\r\n    const chatroomId = match.params.id;\r\n    const [messages, setMessages] = React.useState([]);\r\n    const messageRef = React.useRef();\r\n    const [roomName, setRoomName] = React.useState('')\r\n    const [typing, setTyping] = React.useState(\"\");\r\n    const userId = localStorage.getItem('userId')\r\n    const name = localStorage.getItem('userName')\r\n    useEffect(async () => {\r\n        // socket = io(CONNECTION_PORT)\r\n        if (socket) {\r\n            socket.on(\"newMessage\", async ({ newMessage }) => {\r\n                const getMessages = await getRoomChat(chatroomId)\r\n                setMessages(getMessages.messages)\r\n                socket.emit('watchMessage', {\r\n                    chatroomId, userId, messageId: newMessage[\"_id\"]\r\n                })\r\n            });\r\n            socket.on(\"typing\", user => {\r\n                setTyping(`${user} is typing...`)\r\n            })\r\n            // socket.on(\"watchMessage\", async chatroomId => {\r\n            //     const getMessages = await getRoomChat(chatroomId)\r\n            //     setMessages(getMessages.messages)\r\n            //     console.log(messages)\r\n            // })\r\n        }\r\n    }, [messages]);\r\n    const sendMessage = () => {\r\n        if (socket) {\r\n            socket.emit(\"chatroomMessage\", {\r\n                chatroomId: chatroomId,\r\n                message: { userId, name, content: messageRef.current.value, date: Date.now() },\r\n                userId: localStorage.getItem('userId')\r\n            });\r\n            messageRef.current.value = \"\";\r\n        }\r\n    };\r\n\r\n    const sendUserAction = () => {\r\n        if (socket) {\r\n            socket.emit('typing', {\r\n                name\r\n            })\r\n        }\r\n    }\r\n\r\n    React.useEffect(async () => {\r\n        socket = socketIOClient(\"http://localhost:5000\");\r\n        const getMessages = await getRoomChat(chatroomId)\r\n        setMessages(getMessages.messages)\r\n        setRoomName(getMessages.name)\r\n        if (socket) {\r\n            socket.emit(\"joinRoom\", {\r\n                chatroomId, userId\r\n            });\r\n        }\r\n\r\n        return () => {\r\n            //Component Unmount\r\n            if (socket) {\r\n                socket.emit(\"leaveRoom\", {\r\n                    chatroomId,\r\n                });\r\n            }\r\n        };\r\n\r\n    }, []);\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setTyping('')\r\n        }, 5000)\r\n    }, [typing])\r\n\r\n    return (\r\n        <div className=\"chatroomPage\">\r\n            {typing && <div className=\"typind\">{typing}</div>}\r\n            <div className=\"chatroomSection\">\r\n                <div className=\"cardHeader\">{roomName ? roomName : 'Chatroom Name'}</div>\r\n                <div className=\"chatroomContent\">\r\n                    {messages.map((message, i) => (\r\n\r\n                        <div key={i} className=\"message\">\r\n                            <span\r\n                                className={\r\n                                    userId === message.userId ? \"ownMessage\" : \"otherMessage\"\r\n                                }\r\n                            >\r\n                                {message.userId === userId ? message.viewers === true ? 'VV  ' : 'V ' : ''}\r\n                                {message.name}:\r\n                            </span>{\" \"}\r\n                            {message.content}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"chatroomActions\">\r\n                    <div>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"message\"\r\n                            placeholder=\"Say something!\"\r\n                            onChange={sendUserAction}\r\n                            ref={messageRef}\r\n                            onUnFocuced\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <button className=\"join\" onClick={sendMessage}>\r\n                            Send\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(ChatroomPage);"]},"metadata":{},"sourceType":"module"}