{"ast":null,"code":"const {\n  JOIN_FAILURE,\n  JOIN_SUCCESS,\n  REQUEST,\n  ROOM_ID,\n  AFTER_POST_MESSAGE,\n  GET_CONVERSATIONS\n} = require('./types');\n\nconst axios = require('axios');\n\nexport const getRoomChat = roomId => {\n  return async dispatch => {\n    dispatch(request());\n\n    try {\n      const response = await axios.post('http://localhost:5000/api/conversation/room', {\n        roomId\n      });\n      if (response.data.message) throw response.data.message;\n      dispatch(joinSuccess(response.data));\n    } catch (e) {\n      dispatch(joinFailure(e.message));\n    }\n  };\n};\nexport const allConversations = () => {\n  return dispatch => {\n    const userId = localStorage.getItem('userId');\n    dispatch(request());\n    axios.post('http://localhost:5000/api/conversation/get').then(respnse => {\n      dispatch(appendConversations(respnse.data));\n    }).catch(e => {\n      dispatch(joinFailure(e.message));\n    });\n  };\n};\nexport const chageRoom = number => {\n  return {\n    type: ROOM_ID,\n    payload: number\n  };\n};\nexport const request = () => {\n  return {\n    type: REQUEST\n  };\n};\nexport const joinSuccess = users => {\n  return {\n    type: JOIN_SUCCESS,\n    payload: users\n  };\n};\nexport const joinFailure = error => {\n  return {\n    type: JOIN_FAILURE,\n    payload: error\n  };\n};\nexport function afterPostMessage(data) {\n  return {\n    type: AFTER_POST_MESSAGE,\n    payload: data\n  };\n}\n\nconst appendConversations = data => {\n  return {\n    type: GET_CONVERSATIONS,\n    payload: data\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Documents/chatapp/client/src/redux/conversations/actions.js"],"names":["JOIN_FAILURE","JOIN_SUCCESS","REQUEST","ROOM_ID","AFTER_POST_MESSAGE","GET_CONVERSATIONS","require","axios","getRoomChat","roomId","dispatch","request","response","post","data","message","joinSuccess","e","joinFailure","allConversations","userId","localStorage","getItem","then","respnse","appendConversations","catch","chageRoom","number","type","payload","users","error","afterPostMessage"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,YAAF;AAAgBC,EAAAA,YAAhB;AAA8BC,EAAAA,OAA9B;AAAuCC,EAAAA,OAAvC;AAAgDC,EAAAA,kBAAhD;AAAoEC,EAAAA;AAApE,IAA0FC,OAAO,CAAC,SAAD,CAAvG;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AAGA,OAAO,MAAME,WAAW,GAAIC,MAAD,IAAY;AACnC,SAAO,MAAOC,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAACC,OAAO,EAAR,CAAR;;AACA,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAN,CAAW,6CAAX,EAA0D;AAAEJ,QAAAA;AAAF,OAA1D,CAAvB;AACA,UAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B,MAAMH,QAAQ,CAACE,IAAT,CAAcC,OAApB;AAC3BL,MAAAA,QAAQ,CAACM,WAAW,CAACJ,QAAQ,CAACE,IAAV,CAAZ,CAAR;AACH,KAJD,CAIE,OAAOG,CAAP,EAAU;AACRP,MAAAA,QAAQ,CAACQ,WAAW,CAACD,CAAC,CAACF,OAAH,CAAZ,CAAR;AACH;AACJ,GATD;AAUH,CAXM;AAaP,OAAO,MAAMI,gBAAgB,GAAG,MAAM;AACtC,SAAQT,QAAD,IAAY;AAEf,UAAMU,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf;AACAZ,IAAAA,QAAQ,CAACC,OAAO,EAAR,CAAR;AACAJ,IAAAA,KAAK,CAACM,IAAN,CAAW,4CAAX,EAA0DU,IAA1D,CAA+DC,OAAO,IAAI;AACtEd,MAAAA,QAAQ,CAACe,mBAAmB,CAACD,OAAO,CAACV,IAAT,CAApB,CAAR;AACH,KAFD,EAEGY,KAFH,CAEST,CAAC,IAAI;AACVP,MAAAA,QAAQ,CAACQ,WAAW,CAACD,CAAC,CAACF,OAAH,CAAZ,CAAR;AACH,KAJD;AAKH,GATD;AAUC,CAXM;AAYP,OAAO,MAAMY,SAAS,GAAIC,MAAD,IAAY;AACjC,SAAO;AACHC,IAAAA,IAAI,EAAE1B,OADH;AAEH2B,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAKH,CANM;AAQP,OAAO,MAAMjB,OAAO,GAAG,MAAM;AACzB,SAAO;AACHkB,IAAAA,IAAI,EAAE3B;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMc,WAAW,GAAGe,KAAK,IAAI;AAChC,SAAO;AACHF,IAAAA,IAAI,EAAE5B,YADH;AAEH6B,IAAAA,OAAO,EAAEC;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMb,WAAW,GAAGc,KAAK,IAAI;AAChC,SAAO;AACHH,IAAAA,IAAI,EAAE7B,YADH;AAEH8B,IAAAA,OAAO,EAAEE;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,SAASC,gBAAT,CAA0BnB,IAA1B,EAAgC;AAEnC,SAAO;AACHe,IAAAA,IAAI,EAAEzB,kBADH;AAEH0B,IAAAA,OAAO,EAAEhB;AAFN,GAAP;AAIH;;AAED,MAAMW,mBAAmB,GAAGX,IAAI,IAAI;AAChC,SAAO;AACHe,IAAAA,IAAI,EAAExB,iBADH;AAEHyB,IAAAA,OAAO,EAAEhB;AAFN,GAAP;AAIH,CALD","sourcesContent":["const { JOIN_FAILURE, JOIN_SUCCESS, REQUEST, ROOM_ID, AFTER_POST_MESSAGE, GET_CONVERSATIONS } = require('./types')\r\nconst axios = require('axios')\r\n\r\n\r\nexport const getRoomChat = (roomId) => {\r\n    return async (dispatch) => {\r\n        dispatch(request())\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/api/conversation/room', { roomId })\r\n            if (response.data.message) throw response.data.message\r\n            dispatch(joinSuccess(response.data))\r\n        } catch (e) {\r\n            dispatch(joinFailure(e.message))\r\n        }\r\n    }\r\n}\r\n\r\nexport const allConversations = () => {\r\nreturn (dispatch)=>{\r\n\r\n    const userId = localStorage.getItem('userId')\r\n    dispatch(request())\r\n    axios.post('http://localhost:5000/api/conversation/get',).then(respnse => {\r\n        dispatch(appendConversations(respnse.data))\r\n    }).catch(e => {\r\n        dispatch(joinFailure(e.message))\r\n    })\r\n}\r\n}\r\nexport const chageRoom = (number) => {\r\n    return {\r\n        type: ROOM_ID,\r\n        payload: number\r\n\r\n    }\r\n}\r\n\r\nexport const request = () => {\r\n    return {\r\n        type: REQUEST\r\n    }\r\n}\r\n\r\nexport const joinSuccess = users => {\r\n    return {\r\n        type: JOIN_SUCCESS,\r\n        payload: users\r\n    }\r\n}\r\n\r\nexport const joinFailure = error => {\r\n    return {\r\n        type: JOIN_FAILURE,\r\n        payload: error\r\n    }\r\n}\r\n\r\nexport function afterPostMessage(data) {\r\n\r\n    return {\r\n        type: AFTER_POST_MESSAGE,\r\n        payload: data\r\n    }\r\n}\r\n\r\nconst appendConversations = data => {\r\n    return {\r\n        type: GET_CONVERSATIONS,\r\n        payload: data\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}