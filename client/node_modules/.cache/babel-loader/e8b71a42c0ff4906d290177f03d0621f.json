{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\chatapp\\\\client\\\\src\\\\Pages\\\\DashboardPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport { getRoomChat } from '../redux/conversations/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  addConversation,\n  getUserConversations\n} = require('../DAL/index');\n\nconst DashboardPage = props => {\n  _s();\n\n  const {\n    conversations\n  } = useSelector(state => state.conversation);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  let socket;\n  const CONNECTION_PORT = \"localhost:5000/\";\n  const [chatrooms, setChatrooms] = useState([]);\n\n  const getChatrooms = () => {\n    axios.post(\"http://localhost:5000/api/conversation/room\", {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"CC_Token\")\n      }\n    }).then(response => {\n      setChatrooms(response.data);\n    }).catch(err => {\n      setTimeout(getChatrooms, 3000);\n    });\n  };\n\n  const joinToRoom = roomId => {\n    console.log('room is', roomId);\n    dispatch(getRoomChat(roomId));\n    history.push('/chat');\n  };\n\n  useEffect(async () => {\n    const userId = localStorage.getItem('userId');\n    const conversations = await getUserConversations(userId);\n    console.log('chat rooms', conversations);\n    setChatrooms(conversations); // eslint-disable-next-line\n  }, []);\n\n  const addChatroom = async () => {\n    const result = await addConversation(name);\n    console.log(result);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardHeader\",\n      children: \"Chatrooms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cardBody\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputGroup\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"chatroomName\",\n          children: \"Chatroom Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"chatroomName\",\n          id: \"chatroomName\",\n          onChange: e => setName(e.target.value),\n          placeholder: \"ChatterBox Nepal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addChatroom,\n      children: \"Create Chatroom\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatrooms\",\n      children: chatrooms && chatrooms.map(chatroom => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatroom\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: chatroom.name || chatroom._id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => joinToRoom(chatroom._id),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"join\",\n            children: \"Join\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this)]\n      }, chatroom._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DashboardPage, \"/uCLvMU3/8ezPyJcMFw0fNNhCDw=\", false, function () {\n  return [useSelector, useHistory, useDispatch];\n});\n\n_c = DashboardPage;\nexport default DashboardPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardPage\");","map":{"version":3,"sources":["C:/Users/User/Documents/chatapp/client/src/Pages/DashboardPage.js"],"names":["React","useEffect","useState","axios","Link","useHistory","connect","useSelector","useDispatch","getRoomChat","addConversation","getUserConversations","require","DashboardPage","props","conversations","state","conversation","history","dispatch","name","setName","socket","CONNECTION_PORT","chatrooms","setChatrooms","getChatrooms","post","headers","Authorization","localStorage","getItem","then","response","data","catch","err","setTimeout","joinToRoom","roomId","console","log","push","userId","addChatroom","result","e","target","value","map","chatroom","_id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { getRoomChat } from '../redux/conversations/actions'\r\nconst { addConversation, getUserConversations } = require('../DAL/index')\r\nconst DashboardPage = (props) => {\r\n    const {conversations} = useSelector(state => state.conversation)\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    const [name, setName] = useState('')\r\n    let socket;\r\n    const CONNECTION_PORT = \"localhost:5000/\";\r\n    const [chatrooms, setChatrooms] = useState([]);\r\n    const getChatrooms = () => {\r\n        axios\r\n            .post(\"http://localhost:5000/api/conversation/room\", {\r\n                headers: {\r\n                    Authorization: \"Bearer \" + localStorage.getItem(\"CC_Token\"),\r\n                },\r\n            })\r\n            .then((response) => {\r\n                setChatrooms(response.data);\r\n            })\r\n            .catch((err) => {\r\n                setTimeout(getChatrooms, 3000);\r\n            });\r\n    };\r\n    const joinToRoom = (roomId) => {\r\n        console.log('room is', roomId)\r\n        dispatch(getRoomChat(roomId))\r\n        history.push('/chat')\r\n    }\r\n    useEffect(async () => {\r\n\r\n        const userId = localStorage.getItem('userId')\r\n        const conversations = await getUserConversations(userId)\r\n        console.log('chat rooms', conversations)\r\n        setChatrooms(conversations)\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n\r\n    const addChatroom = async () => {\r\n        const result = await addConversation(name);\r\n        console.log(result)\r\n    }\r\n    return (\r\n        <div >\r\n            <div className=\"cardHeader\">Chatrooms</div>\r\n            <div className=\"cardBody\">\r\n                <div className=\"inputGroup\">\r\n                    <label htmlFor=\"chatroomName\">Chatroom Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"chatroomName\"\r\n                        id=\"chatroomName\"\r\n                        onChange={(e) => setName(e.target.value)}\r\n                        placeholder=\"ChatterBox Nepal\"\r\n\r\n                    />\r\n                </div>\r\n            </div>\r\n            <button onClick={addChatroom}>Create Chatroom</button>\r\n            <div className=\"chatrooms\">\r\n                {chatrooms && chatrooms.map((chatroom) => (\r\n                    <div key={chatroom._id} className=\"chatroom\">\r\n                        <div>{chatroom.name || chatroom._id}</div>\r\n                        <li onClick={() => joinToRoom(chatroom._id)}>\r\n                            <div className=\"join\">Join</div>\r\n                        </li>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default DashboardPage"]},"metadata":{},"sourceType":"module"}