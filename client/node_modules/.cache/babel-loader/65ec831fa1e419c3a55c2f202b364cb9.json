{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\chatapp\\\\client\\\\src\\\\pages\\\\LiveChat.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport { afterPostMessage } from '../redux/conversations/actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction LiveChat() {\n  _s();\n\n  let socket;\n  const [message, setMessage] = useState('');\n  const [typing, setTyping] = useState(false);\n  const {\n    messages,\n    members,\n    loading,\n    error,\n    name2,\n    currentRoom\n  } = useSelector(state => state.conversations);\n  const {\n    user\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const userId = localStorage.getItem('userId');\n  const name = localStorage.getItem('userName');\n  const chatroomId = currentRoom;\n  useEffect(() => {\n    socket = socketIOClient(\"http://localhost:5000\");\n\n    if (socket) {\n      socket.emit(\"joinRoom\", {\n        chatroomId,\n        userId\n      });\n      socket.on(\"newMessage\", ({\n        newMessage\n      }) => {\n        dispatch(afterPostMessage(newMessage));\n      });\n      socket.on(\"typing\", user => {\n        setTyping(`${user} is typing...`);\n      });\n      socket.emit(\"joinRoom\", {\n        chatroomId,\n        userId\n      });\n    }\n\n    return () => {\n      //Component Unmount\n      if (socket) {\n        socket.emit(\"leaveRoom\", {\n          chatroomId\n        });\n      }\n    };\n  }, [messages]);\n  useEffect(() => {\n    setTimeout(() => {\n      setTyping(false);\n    }, 5000);\n  }, [typing]);\n\n  const sendUserAction = e => {\n    const user = localStorage.getItem('userName');\n    setMessage(e.target.value);\n\n    if (socket) {\n      socket.emit('typing', user);\n    }\n  };\n\n  const sendMessage = () => {\n    const chatMessage = {\n      chatroomId: currentRoom,\n      message: {\n        userId: localStorage.getItem('userId'),\n        name,\n        content: message,\n        date: Date.now()\n      },\n      userId: localStorage.getItem('userId')\n    };\n    axios;\n\n    if (socket) {\n      socket.emit(\"chatroomMessage\", chatMessage);\n      setMessage(\"\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(\"li\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"li\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 23\n    }, this), name && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 22\n    }, this), typing && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: typing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 24\n    }, this), messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"no messages yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 38\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"story\",\n          children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n            className: \"story__shape\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: message.image,\n              alt: `${message.name}'s img`,\n              class: \"story__img\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"figcaption\", {\n              className: \"story__caption\",\n              children: message.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"story__text\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: message.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: message.userId === userId ? message.views ? 'VV' : 'V' : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 64\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"message-form\",\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"message-input\",\n        placeholder: \"Send a message...\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"upload-button\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"image-button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-button\",\n        children: \"send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(LiveChat, \"1eNsT76EFsWxjT7BK2mdeuqapnE=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = LiveChat;\nexport default LiveChat;\n\nvar _c;\n\n$RefreshReg$(_c, \"LiveChat\");","map":{"version":3,"sources":["C:/Users/User/Documents/chatapp/client/src/pages/LiveChat.jsx"],"names":["React","useState","useEffect","socketIOClient","afterPostMessage","useSelector","useDispatch","axios","LiveChat","socket","message","setMessage","typing","setTyping","messages","members","loading","error","name2","currentRoom","state","conversations","user","dispatch","userId","localStorage","getItem","name","chatroomId","emit","on","newMessage","setTimeout","sendUserAction","e","target","value","sendMessage","chatMessage","content","date","Date","now","length","map","i","image","views"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\nimport { afterPostMessage } from '../redux/conversations/actions'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport axios from 'axios'\r\nfunction LiveChat() {\r\n    let socket\r\n    const [message, setMessage] = useState('')\r\n    const [typing, setTyping] = useState(false)\r\n    const { messages, members, loading, error, name2, currentRoom } = useSelector(state => state.conversations)\r\n    const { user } = useSelector(state => state.user)\r\n    const dispatch = useDispatch()\r\n    const userId = localStorage.getItem('userId')\r\n    const name = localStorage.getItem('userName')\r\n    const chatroomId = currentRoom\r\n    useEffect(() => {\r\n        socket = socketIOClient(\"http://localhost:5000\");\r\n        if (socket) {\r\n            socket.emit(\"joinRoom\", {\r\n                chatroomId, userId\r\n            });\r\n\r\n            socket.on(\"newMessage\", ({ newMessage }) => {\r\n                dispatch(afterPostMessage(newMessage))\r\n            });\r\n            socket.on(\"typing\", user => {\r\n                setTyping(`${user} is typing...`)\r\n            })\r\n            socket.emit(\"joinRoom\", {\r\n                chatroomId, userId\r\n            });\r\n        }\r\n        return () => {\r\n            //Component Unmount\r\n            if (socket) {\r\n                socket.emit(\"leaveRoom\", {\r\n                    chatroomId,\r\n                });\r\n            }\r\n        };\r\n    }, [messages]);\r\n\r\n    useEffect(() => {\r\n\r\n        setTimeout(() => {\r\n            setTyping(false)\r\n        }, 5000)\r\n    }, [typing])\r\n    const sendUserAction = (e) => {\r\n        const user = localStorage.getItem('userName')\r\n        setMessage(e.target.value)\r\n        if (socket) {\r\n            socket.emit('typing', user)\r\n        }\r\n    }\r\n    const sendMessage = () => {\r\n        const chatMessage = {\r\n            chatroomId: currentRoom,\r\n            message: { userId: localStorage.getItem('userId'), name, content: message, date: Date.now() },\r\n            userId: localStorage.getItem('userId')\r\n        }\r\n        axios\r\n        if (socket) {\r\n            socket.emit(\"chatroomMessage\", chatMessage);\r\n            setMessage(\"\");\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            {loading && <li>loading</li>}\r\n            {error && <li>{error}</li>}\r\n            {name && <h2>{name}</h2>}\r\n            {typing && <p>{typing}</p>}\r\n            {messages.length === 0 ? <p>no messages yet</p> : (<div className=\"messages\">\r\n                {messages.map((message, i) => (\r\n                    <div className=\"row\">\r\n                        <div className=\"story\">\r\n                            <figure className=\"story__shape\">\r\n                                <img src={message.image} alt={`${message.name}'s img`} class=\"story__img\" />\r\n                                <figcaption className=\"story__caption\">{message.name}</figcaption>\r\n                            </figure >\r\n                            <div className=\"story__text\">\r\n                                <p>\r\n                                    {message.content}\r\n                                </p>\r\n                            </div>\r\n                            <p>\r\n                                {message.userId === userId ? message.views ? 'VV' : 'V' : ''}\r\n                            </p>\r\n                        </div >\r\n                    </div >\r\n                ))\r\n                }\r\n            </div >)}\r\n\r\n            <form className=\"message-form\" onSubmit={sendMessage}>\r\n                <input\r\n                    className=\"message-input\"\r\n                    placeholder=\"Send a message...\"\r\n                    value={message}\r\n                    onChange={(e)=>setMessage(e.target.value)}\r\n                />\r\n                <label htmlFor=\"upload-button\">\r\n                    <span className=\"image-button\">\r\n                      \r\n                    </span>\r\n                </label>\r\n                {/* <input\r\n                    type=\"file\"\r\n                    multiple={false}\r\n                    id=\"upload-button\"\r\n                    style={{ display: 'none' }}\r\n                    onChange={handleUpload.bind(this)}\r\n                /> */}\r\n                <button type=\"submit\" className=\"send-button\">\r\n                    send\r\n                </button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LiveChat\r\n"]},"metadata":{},"sourceType":"module"}