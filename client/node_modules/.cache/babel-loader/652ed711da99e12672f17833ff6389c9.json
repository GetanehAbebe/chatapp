{"ast":null,"code":"const axios = require('axios');\n\nconst login = async (email, password) => {\n  try {\n    const response = await axios.post('http://localhost:5000/api/user/login', {\n      email,\n      password\n    }, {\n      withCredentials: true\n    });\n    console.log('response', response);\n    return response.data;\n  } catch (e) {\n    console.log('response', e);\n    return e;\n  }\n};\n\nconst signUp = async object => {\n  try {\n    const response = await axios.post('http://localhost:5000/api/user/signup', { ...object\n    }, {\n      withCredentials: true\n    });\n    return response.data;\n  } catch (e) {\n    console.log(e);\n    return e;\n  }\n};\n\nconst getUserConversations = async userId => {\n  const response = await axios.post('http://localhost:5000/api/conversation/get', {\n    userId,\n    headers: {\n      Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n    }\n  }, {\n    withCredentials: true,\n    headers: {\n      Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n    }\n  });\n  return response.data;\n};\n\nconst getRoomChat = async roomId => {\n  const response = await axios.post('http://localhost:5000/api/conversation/room', {\n    roomId\n  }, {\n    withCredentials: true\n  }); // console.log('response',response)\n\n  if (!response.data.message) {\n    const numOfMembers = response.data.participants.length;\n    const viewers = response.data.messages.map(message => {\n      const newMessage = { ...message,\n        viewers: message.viewers.length === numOfMembers\n      };\n      return newMessage;\n    });\n    response.data.messages = viewers;\n    return response.data;\n  }\n\n  return response.data;\n};\n\nconst getUserContacts = async userId => {\n  const response = await axios.post('http://localhost:5000/api/contact', {\n    userId\n  }, {\n    withCredentials: true\n  });\n  return response.data;\n};\n\nconst addToContacts = async (userId, users) => {\n  const response = await axios.post('http://localhost:5000/api/contact/add', {\n    userId,\n    ...users\n  }, {\n    withCredentials: true\n  });\n  return response.data;\n};\n\nconst addConversation = async (name, users, userId) => {\n  const participants = [{\n    name,\n    users,\n    userId\n  }];\n  const response = await axios.post('http://localhost:5000/api/conversation', {\n    name,\n    users,\n    userId\n  }, {\n    withCredentials: true\n  });\n  return response.data;\n};\n\nmodule.exports = {\n  login,\n  signUp,\n  getUserConversations,\n  getUserContacts,\n  addToContacts,\n  getRoomChat,\n  addConversation\n};","map":{"version":3,"sources":["C:/Users/User/Documents/chatapp/client/src/DAL/index.js"],"names":["axios","require","login","email","password","response","post","withCredentials","console","log","data","e","signUp","object","getUserConversations","userId","headers","Authorization","localStorage","getItem","getRoomChat","roomId","message","numOfMembers","participants","length","viewers","messages","map","newMessage","getUserContacts","addToContacts","users","addConversation","name","module","exports"],"mappings":"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","sourcesContent":["const axios = require('axios');\r\n\r\nconst login = async (email, password) => {\r\n    try {\r\n        const response = await axios.post('http://localhost:5000/api/user/login', { email, password }, { withCredentials: true })\r\n        console.log('response', response)\r\n        return response.data\r\n    } catch (e) {\r\n        console.log('response', e)\r\n        return e\r\n    }\r\n};\r\n\r\nconst signUp = async (object) => {\r\n    try {\r\n        const response = await axios.post('http://localhost:5000/api/user/signup', { ...object }, { withCredentials: true })\r\n        return response.data\r\n    } catch (e) {\r\n        console.log(e)\r\n        return e\r\n    }\r\n};\r\n\r\nconst getUserConversations = async (userId) => {\r\n    const response = await axios.post('http://localhost:5000/api/conversation/get', {\r\n        userId,\r\n        headers: {\r\n            Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n        },\r\n    }, {\r\n        withCredentials: true,\r\n        headers: {\r\n            Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n        },\r\n    })\r\n    return response.data\r\n};\r\n\r\n\r\nconst getRoomChat = async (roomId) => {\r\n    const response = await axios.post('http://localhost:5000/api/conversation/room', { roomId }, { withCredentials: true })\r\n    // console.log('response',response)\r\n    if (!response.data.message) {\r\n        const numOfMembers = response.data.participants.length\r\n        const viewers = response.data.messages.map(message => {\r\n            const newMessage = { ...message, viewers: (message.viewers.length === numOfMembers) }\r\n            return newMessage\r\n        })\r\n        response.data.messages = viewers\r\n\r\n        return response.data\r\n    }\r\n    return response.data\r\n};\r\nconst getUserContacts = async (userId) => {\r\n    const response = await axios.post('http://localhost:5000/api/contact', { userId }, { withCredentials: true })\r\n    return response.data\r\n};\r\nconst addToContacts = async (userId, users) => {\r\n    const response = await axios.post('http://localhost:5000/api/contact/add', { userId, ...users }, { withCredentials: true })\r\n    return response.data\r\n};\r\n\r\n\r\nconst addConversation = async (name, users, userId) => {\r\n    const participants = [{ name, users, userId }]\r\n    const response = await axios.post('http://localhost:5000/api/conversation', { name, users, userId }, { withCredentials: true })\r\n    return response.data\r\n};\r\n\r\nmodule.exports = {\r\n    login,\r\n    signUp,\r\n    getUserConversations,\r\n    getUserContacts,\r\n    addToContacts,\r\n    getRoomChat,\r\n    addConversation\r\n}"]},"metadata":{},"sourceType":"module"}