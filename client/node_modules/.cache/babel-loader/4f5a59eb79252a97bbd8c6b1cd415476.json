{"ast":null,"code":"const {\n  io\n} = require(\"socket.io-client\");\n\nconst {\n  SIGNUP_SUCCESS,\n  SIGNUP_FAILURE,\n  SIGNUP_REQUEST,\n  LOGIN_FAILURE,\n  LOGIN_SUCCESS,\n  REQUEST\n} = require('../user/types');\n\nconst initialState = {\n  loading: false,\n  user: localStorage.getItem('userId'),\n  error: '',\n  socket: setupSocket()\n};\n\nconst setupSocket = () => {\n  const token = localStorage.getItem(\"token\");\n\n  if (token && !initialState.socket) {\n    const newSocket = io(\"http://localhost:5000\", {\n      query: {\n        token: localStorage.getItem(\"token\")\n      }\n    });\n    newSocket.on(\"disconnect\", () => {\n      setTimeout(setupSocket, 3000);\n    });\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case LOGIN_SUCCESS:\n      return {\n        loading: false,\n        user: action.payload,\n        error: ''\n      };\n\n    case SIGNUP_SUCCESS:\n      return {\n        loading: false,\n        user: action.payload,\n        error: '',\n        socket: setupSocket()\n      };\n\n    case LOGIN_FAILURE:\n      return {\n        loading: false,\n        user: '',\n        error: action.payload\n      };\n\n    case SIGNUP_FAILURE:\n      return {\n        loading: false,\n        user: '',\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nmodule.exports = reducer;","map":{"version":3,"sources":["C:/Users/User/Documents/chatapp/client/src/redux/user/reducer.js"],"names":["io","require","SIGNUP_SUCCESS","SIGNUP_FAILURE","SIGNUP_REQUEST","LOGIN_FAILURE","LOGIN_SUCCESS","REQUEST","initialState","loading","user","localStorage","getItem","error","socket","setupSocket","token","newSocket","query","on","setTimeout","reducer","state","action","type","payload","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAASC,OAAO,CAAC,kBAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA,cAAlB;AACFC,EAAAA,cADE;AACcC,EAAAA,aADd;AAC6BC,EAAAA,aAD7B;AAC4CC,EAAAA;AAD5C,IACwDN,OAAO,CAAC,eAAD,CADrE;;AAEA,MAAMO,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,IAAI,EAAEC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAFW;AAGjBC,EAAAA,KAAK,EAAE,EAHU;AAIjBC,EAAAA,MAAM,EAAEC,WAAW;AAJF,CAArB;;AAOA,MAAMA,WAAW,GAAG,MAAM;AACtB,QAAMC,KAAK,GAAGL,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,MAAII,KAAK,IAAI,CAACR,YAAY,CAACM,MAA3B,EAAmC;AAC/B,UAAMG,SAAS,GAAGjB,EAAE,CAAC,uBAAD,EAA0B;AAC1CkB,MAAAA,KAAK,EAAE;AACHF,QAAAA,KAAK,EAAEL,YAAY,CAACC,OAAb,CAAqB,OAArB;AADJ;AADmC,KAA1B,CAApB;AAMAK,IAAAA,SAAS,CAACE,EAAV,CAAa,YAAb,EAA2B,MAAM;AAC7BC,MAAAA,UAAU,CAACL,WAAD,EAAc,IAAd,CAAV;AACH,KAFD;AAKH;AACJ,CAfD;;AAgBA,MAAMM,OAAO,GAAG,CAACC,KAAK,GAAGd,YAAT,EAAuBe,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKjB,OAAL;AACI,aAAO,EACH,GAAGe,KADA;AAEHb,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAIJ,SAAKH,aAAL;AACI,aAAO;AACHG,QAAAA,OAAO,EAAE,KADN;AAEHC,QAAAA,IAAI,EAAEa,MAAM,CAACE,OAFV;AAGHZ,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAKX,cAAL;AACI,aAAO;AACHO,QAAAA,OAAO,EAAE,KADN;AAEHC,QAAAA,IAAI,EAAEa,MAAM,CAACE,OAFV;AAGHZ,QAAAA,KAAK,EAAE,EAHJ;AAIHC,QAAAA,MAAM,EAAEC,WAAW;AAJhB,OAAP;;AAMJ,SAAKV,aAAL;AACI,aAAO;AACHI,QAAAA,OAAO,EAAE,KADN;AAEHC,QAAAA,IAAI,EAAE,EAFH;AAGHG,QAAAA,KAAK,EAAEU,MAAM,CAACE;AAHX,OAAP;;AAMJ,SAAKtB,cAAL;AACI,aAAO;AACHM,QAAAA,OAAO,EAAE,KADN;AAEHC,QAAAA,IAAI,EAAE,EAFH;AAGHG,QAAAA,KAAK,EAAEU,MAAM,CAACE;AAHX,OAAP;;AAKJ;AAAS,aAAOH,KAAP;AAhCb;AAkCH,CAnCD;;AAqCAI,MAAM,CAACC,OAAP,GAAiBN,OAAjB","sourcesContent":["const { io } = require(\"socket.io-client\");\r\nconst { SIGNUP_SUCCESS, SIGNUP_FAILURE,\r\n    SIGNUP_REQUEST, LOGIN_FAILURE, LOGIN_SUCCESS, REQUEST } = require('../user/types')\r\nconst initialState = {\r\n    loading: false,\r\n    user: localStorage.getItem('userId'),\r\n    error: '',\r\n    socket: setupSocket()\r\n}\r\n\r\nconst setupSocket = () => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token && !initialState.socket) {\r\n        const newSocket = io(\"http://localhost:5000\", {\r\n            query: {\r\n                token: localStorage.getItem(\"token\"),\r\n            },\r\n        });\r\n\r\n        newSocket.on(\"disconnect\", () => {\r\n            setTimeout(setupSocket, 3000);\r\n        });\r\n\r\n\r\n    }\r\n};\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case REQUEST:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case LOGIN_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                user: action.payload,\r\n                error: ''\r\n            }\r\n        case SIGNUP_SUCCESS:\r\n            return {\r\n                loading: false,\r\n                user: action.payload,\r\n                error: '',\r\n                socket: setupSocket()\r\n            }\r\n        case LOGIN_FAILURE:\r\n            return {\r\n                loading: false,\r\n                user: '',\r\n                error: action.payload\r\n            }\r\n\r\n        case SIGNUP_FAILURE:\r\n            return {\r\n                loading: false,\r\n                user: '',\r\n                error: action.payload\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nmodule.exports = reducer"]},"metadata":{},"sourceType":"module"}