{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\chatapp\\\\client\\\\src\\\\pages\\\\chat\\\\ChatFeed.jsx\",\n    _s = $RefreshSig$();\n\nimport MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\nimport MessageForm from './MessageForm';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatFeed = props => {\n  _s();\n\n  var _chat$people;\n\n  // const { chats, activeChat, userName, messages } = props;\n  const {\n    messages,\n    members,\n    loading,\n    error,\n    conversations: chats,\n    name: userName,\n    currentRoom: activeChat\n  } = useSelector(state => state.conversations);\n  console.log('chat feed', messages, chats, userName, activeChat);\n  const chat = messages;\n\n  const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"read-receipt\",\n    style: {\n      float: isMyMessage ? 'right' : 'left',\n      backgroundImage: person.person.avatar && `url(${person.person.avatar})`\n    }\n  }, `read_${index}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this));\n\n  const renderMessages = () => {\n    const keys = Object.keys(messages);\n    return keys.map((key, index) => {\n      var _message$sender;\n\n      const message = messages[key];\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\n      const isMyMessage = userName === ((_message$sender = message.sender) === null || _message$sender === void 0 ? void 0 : _message$sender.username);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-block\",\n          children: isMyMessage ? /*#__PURE__*/_jsxDEV(MyMessage, {\n            message: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 31\n          }, this) : /*#__PURE__*/_jsxDEV(TheirMessage, {\n            message: message,\n            lastMessage: messages[lastMessageKey]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"read-receipts\",\n          style: {\n            marginRight: isMyMessage ? '18px' : '0px',\n            marginLeft: isMyMessage ? '0px' : '68px'\n          },\n          children: renderReadReceipts(message, isMyMessage)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)]\n      }, `msg_${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this);\n    });\n  };\n\n  if (!chat) return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-feed\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-title-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-title\",\n        children: chat === null || chat === void 0 ? void 0 : chat.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-subtitle\",\n        children: (_chat$people = chat.people) === null || _chat$people === void 0 ? void 0 : _chat$people.map(person => ` ${person.person.username}`)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), renderMessages(), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-form-container\",\n      children: /*#__PURE__*/_jsxDEV(MessageForm, { ...props,\n        chatId: activeChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatFeed, \"kFrZ2DK8Tx6ikQ9Cs41UohtgZPk=\", false, function () {\n  return [useSelector];\n});\n\n_c = ChatFeed;\nexport default ChatFeed;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatFeed\");","map":{"version":3,"sources":["C:/Users/User/Documents/chatapp/client/src/pages/chat/ChatFeed.jsx"],"names":["MyMessage","TheirMessage","MessageForm","useSelector","ChatFeed","props","messages","members","loading","error","conversations","chats","name","userName","currentRoom","activeChat","state","console","log","chat","renderReadReceipts","message","isMyMessage","people","map","person","index","last_read","id","float","backgroundImage","avatar","renderMessages","keys","Object","key","lastMessageKey","sender","username","width","marginRight","marginLeft","title","height"],"mappings":"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","sourcesContent":["import MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\nimport MessageForm from './MessageForm';\r\nimport { useSelector } from 'react-redux';\r\nconst ChatFeed = (props) => {\r\n\r\n    // const { chats, activeChat, userName, messages } = props;\r\n    const { messages, members, loading, error, conversations: chats, name: userName, currentRoom: activeChat } = useSelector(state => state.conversations)\r\n    console.log('chat feed', messages, chats, userName, activeChat)\r\n    const chat = messages\r\n\r\n    const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && (\r\n        <div\r\n            key={`read_${index}`}\r\n            className=\"read-receipt\"\r\n            style={{\r\n                float: isMyMessage ? 'right' : 'left',\r\n                backgroundImage: person.person.avatar && `url(${person.person.avatar})`,\r\n            }}\r\n        />\r\n    ));\r\n\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages);\r\n\r\n        return keys.map((key, index) => {\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n            const isMyMessage = userName === message.sender?.username;\r\n\r\n            return (\r\n                <div key={`msg_${index}`} style={{ width: '100%' }}>\r\n                    <div className=\"message-block\">\r\n                        {isMyMessage\r\n                            ? <MyMessage message={message} />\r\n                            : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />}\r\n                    </div>\r\n                    <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\r\n                        {renderReadReceipts(message, isMyMessage)}\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n    };\r\n\r\n    if (!chat) return <div />;\r\n\r\n    return (\r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">{chat?.title}</div>\r\n                <div className=\"chat-subtitle\">\r\n                    {chat.people?.map((person) => ` ${person.person.username}`)}\r\n                </div>\r\n            </div>\r\n            {renderMessages()}\r\n            <div style={{ height: '100px' }} />\r\n            <div className=\"message-form-container\">\r\n                <MessageForm {...props} chatId={activeChat} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatFeed;"]},"metadata":{},"sourceType":"module"}