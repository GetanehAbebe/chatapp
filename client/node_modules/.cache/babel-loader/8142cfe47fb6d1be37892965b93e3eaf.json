{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\chatapp\\\\client\\\\src\\\\pages\\\\chat\\\\ChatFeed.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\nimport MessageForm from './MessageForm';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { afterPostMessage } from '../../redux/conversations/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatFeed = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [typing, setTyping] = useState(false); // const { chats, activeChat, userName, messages } = props;\n\n  const {\n    messages,\n    members,\n    loading,\n    error,\n    conversations: chats,\n    name: userName,\n    currentRoom: activeChat\n  } = useSelector(state => state.conversations);\n  console.log('chat feed', messages, chats, userName, activeChat);\n  const chat = messages; // const socket = io(\"http://localhost\");\n\n  useEffect(() => {\n    socket.emit('joinRoom', {\n      userId: 'fff'\n    });\n    return () => {};\n  }, []);\n\n  const renderReadReceipts = (message, isMyMessage) => chat.map((person, index) => person.last_read === (message === null || message === void 0 ? void 0 : message.id) && /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"read-receipt\",\n    style: {\n      float: isMyMessage ? 'right' : 'left',\n      backgroundImage: `url('https://www.pixsy.com/wp-content/uploads/2021/04/ben-sweet-2LowviVHZ-E-unsplash-1.jpeg')`\n    }\n  }, `read_${index}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this));\n\n  const renderMessages = () => {\n    // const keys = Object.keys(messages);\n    return messages.map((key, index) => {\n      const message = key;\n      const lastMessageKey = index === 0 ? null : message;\n      const isMyMessage = message.userId === localStorage.getItem('userId');\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-block\",\n          children: isMyMessage ? /*#__PURE__*/_jsxDEV(MyMessage, {\n            message: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 31\n          }, this) : /*#__PURE__*/_jsxDEV(TheirMessage, {\n            message: message,\n            lastMessage: messages[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"read-receipts\",\n          style: {\n            marginRight: isMyMessage ? '18px' : '0px',\n            marginLeft: isMyMessage ? '0px' : '68px'\n          },\n          children: renderReadReceipts(message, isMyMessage)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, `msg_${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this);\n    });\n  };\n\n  if (!chat) return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-feed \",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-title-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-title\",\n        children: chat === null || chat === void 0 ? void 0 : chat.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-subtitle\",\n        children: chat.map(person => `${person.userId}`)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-feed\",\n      children: renderMessages()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MessageForm, { ...props,\n        chatId: activeChat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatFeed, \"KAcUjdcEj+yg9MOdZsGykTkNtFA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ChatFeed;\nexport default ChatFeed;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatFeed\");","map":{"version":3,"sources":["C:/Users/User/Documents/chatapp/client/src/pages/chat/ChatFeed.jsx"],"names":["useEffect","useState","MyMessage","TheirMessage","MessageForm","useSelector","useDispatch","afterPostMessage","ChatFeed","props","dispatch","typing","setTyping","messages","members","loading","error","conversations","chats","name","userName","currentRoom","activeChat","state","console","log","chat","socket","emit","userId","renderReadReceipts","message","isMyMessage","map","person","index","last_read","id","float","backgroundImage","renderMessages","key","lastMessageKey","localStorage","getItem","width","marginRight","marginLeft","title"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\nimport MessageForm from './MessageForm';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { afterPostMessage } from '../../redux/conversations/actions'\r\nconst ChatFeed = (props) => {\r\n    const dispatch = useDispatch()\r\n    const [typing, setTyping] = useState(false)\r\n    // const { chats, activeChat, userName, messages } = props;\r\n    const { messages, members, loading, error, conversations: chats, name: userName, currentRoom: activeChat } = useSelector(state => state.conversations)\r\n    console.log('chat feed', messages, chats, userName, activeChat)\r\n    const chat = messages\r\n    // const socket = io(\"http://localhost\");\r\n\r\n    useEffect(() => {\r\n        socket.emit('joinRoom', { userId: 'fff' })\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n   \r\n    const renderReadReceipts = (message, isMyMessage) => chat.map((person, index) => person.last_read === message?.id && (\r\n        <div\r\n            key={`read_${index}`}\r\n            className=\"read-receipt\"\r\n            style={{\r\n                float: isMyMessage ? 'right' : 'left',\r\n                backgroundImage: `url('https://www.pixsy.com/wp-content/uploads/2021/04/ben-sweet-2LowviVHZ-E-unsplash-1.jpeg')`,\r\n            }}\r\n        />\r\n    ));\r\n\r\n    \r\n    const renderMessages = () => {\r\n        // const keys = Object.keys(messages);\r\n\r\n        return messages.map((key, index) => {\r\n            const message = key;\r\n            const lastMessageKey = index === 0 ? null : message;\r\n            const isMyMessage = message.userId === localStorage.getItem('userId')\r\n\r\n            return (\r\n\r\n                <div key={`msg_${index}`} style={{ width: '100%' }}>\r\n                    <div className=\"message-block\">\r\n                        {isMyMessage\r\n                            ? <MyMessage message={message} />\r\n                            : <TheirMessage message={message} lastMessage={messages[0]} />}\r\n                    </div>\r\n                    <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\r\n                        {renderReadReceipts(message, isMyMessage)}\r\n                    </div>\r\n                </div>\r\n            );\r\n        });\r\n    };\r\n\r\n    if (!chat) return <div />;\r\n    return (\r\n        <div className=\"chat-feed \">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">{chat?.title}</div>\r\n                <div className=\"chat-subtitle\">\r\n                    {chat.map((person) => `${person.userId}`)}\r\n                </div>\r\n            </div>\r\n            <div className='messages-feed'>\r\n                {renderMessages()}\r\n            </div>\r\n            <div className=\"message-form-container\">\r\n                <input type='text'  />\r\n                <MessageForm {...props} chatId={activeChat} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatFeed;"]},"metadata":{},"sourceType":"module"}