[{"C:\\Users\\User\\Documents\\chatapp\\client\\src\\index.js":"1","C:\\Users\\User\\Documents\\chatapp\\client\\src\\App.js":"2","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\store.js":"3","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\rootReducer.js":"4","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\user\\reducer.js":"5","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\user\\actions.js":"6","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\conversations\\actions.js":"7","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\conversations\\reducer.js":"8","C:\\Users\\User\\Documents\\chatapp\\client\\src\\DAL\\index.js":"9","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\user\\types.js":"10","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\contacts\\reducer.js":"11","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\conversations\\types.js":"12","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\contacts\\types.js":"13","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\contacts\\actions.js":"14","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\LoginPage.jsx":"15","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\DashboardPage.jsx":"16","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\GroupPage.jsx":"17","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\IndexPage.jsx":"18","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\Register.jsx":"19","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\Contacts.jsx":"20","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\LiveChat.jsx":"21","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\DashboardPage.jsx":"22","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\LoginPage.jsx":"23","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\IndexPage.jsx":"24","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\GroupPage.jsx":"25","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\Register.jsx":"26","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\Contacts.jsx":"27","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\LiveChat.jsx":"28","C:\\Users\\User\\Documents\\chatapp\\client\\src\\components\\Navigation\\Navbar.jsx":"29","C:\\Users\\User\\Documents\\chatapp\\client\\src\\components\\Navigation\\NavBar.jsx":"30","C:\\Users\\User\\Documents\\chatapp\\client\\src\\components\\UIElemets\\Card.jsx":"31"},{"size":345,"mtime":1634680115506,"results":"32","hashOfConfig":"33"},{"size":2356,"mtime":1634685950770,"results":"34","hashOfConfig":"33"},{"size":509,"mtime":1634683695388,"results":"35","hashOfConfig":"33"},{"size":398,"mtime":1634683678176,"results":"36","hashOfConfig":"33"},{"size":1152,"mtime":1634676607726,"results":"37","hashOfConfig":"33"},{"size":2075,"mtime":1634676824407,"results":"38","hashOfConfig":"33"},{"size":1669,"mtime":1634664719311,"results":"39","hashOfConfig":"33"},{"size":1532,"mtime":1634664822358,"results":"40","hashOfConfig":"33"},{"size":2565,"mtime":1634706677455,"results":"41","hashOfConfig":"33"},{"size":491,"mtime":1634562360264,"results":"42","hashOfConfig":"33"},{"size":961,"mtime":1634683644434,"results":"43","hashOfConfig":"33"},{"size":357,"mtime":1634664425407,"results":"44","hashOfConfig":"33"},{"size":280,"mtime":1634683666908,"results":"45","hashOfConfig":"33"},{"size":1154,"mtime":1634677202248,"results":"46","hashOfConfig":"33"},{"size":2879,"mtime":1634683436201,"results":"47","hashOfConfig":"33"},{"size":2412,"mtime":1634686081276,"results":"48","hashOfConfig":"33"},{"size":2102,"mtime":1634686613488,"results":"49","hashOfConfig":"33"},{"size":420,"mtime":1634683556496,"results":"50","hashOfConfig":"33"},{"size":5193,"mtime":1634683505290,"results":"51","hashOfConfig":"33"},{"size":558,"mtime":1634686494099,"results":"52","hashOfConfig":"33"},{"size":4112,"mtime":1634683590184,"results":"53","hashOfConfig":"33"},{"size":2412,"mtime":1634686081276,"results":"54","hashOfConfig":"33"},{"size":2879,"mtime":1634683436201,"results":"55","hashOfConfig":"33"},{"size":420,"mtime":1634683556496,"results":"56","hashOfConfig":"33"},{"size":2102,"mtime":1634686613488,"results":"57","hashOfConfig":"33"},{"size":5193,"mtime":1634683505290,"results":"58","hashOfConfig":"33"},{"size":558,"mtime":1634686494099,"results":"59","hashOfConfig":"33"},{"size":4073,"mtime":1634707068503,"results":"60","hashOfConfig":"33"},{"size":1684,"mtime":1634679727576,"results":"61","hashOfConfig":"33"},{"size":1684,"mtime":1634679727576,"results":"62","hashOfConfig":"33"},{"size":248,"mtime":1634686624352,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},"svn0ed",{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"67"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"67"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"99"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"99"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"99"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"99"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"99"},{"filePath":"117","messages":"118","errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"67"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"67"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"67"},{"filePath":"126","messages":"127","errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"67"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"67"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"67"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Documents\\chatapp\\client\\src\\index.js",["143"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './sass/main.scss'\nimport { Provider, useSelector } from 'react-redux'\nimport store from './redux/store'\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById(\"root\"));\n",["144","145"],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\App.js",["146"],"import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport LoginPage from \"./pages/LoginPage\";\nimport DashboardPage from \"./pages/DashboardPage\";\nimport IndexPage from \"./pages/IndexPage\";\nimport io from \"socket.io-client\";\nimport NavBar from \"./components/Navigation/NavBar\";\nimport { useSelector } from 'react-redux'\nimport GroupPage from './pages/GroupPage'\nimport Register from \"./pages/Register\";\nimport Contacts from \"./pages/Contacts\";\nimport LiveChat from \"./pages/LiveChat\";\nfunction App() {\n  const { user } = useSelector(state => state.user)\n  const [socket, setSocket] = useState(null);\n  const setupSocket = () => {\n    const token = localStorage.getItem(\"token\");\n    if (token && !socket) {\n      const newSocket = io(\"http://localhost:5000\", {\n        query: {\n          token: localStorage.getItem(\"token\"),\n        },\n      });\n      newSocket.on(\"disconnect\", () => {\n        setSocket(null);\n        setTimeout(setupSocket, 3000);\n      });\n      setSocket(newSocket);\n    }\n  };\n\n  useEffect(() => {\n    setupSocket();\n    return () => { }\n  }, []);\n  let routes\n  if (user) {\n    routes = (\n      <Switch>\n        <Route path=\"/conversations\" render={() => <DashboardPage />} exact socket={socket} />\n        <Route path=\"/chatroom\" render={() => <LiveChat socket={socket} />} exact />\n        <Route\n          path=\"/dashboard\"\n          render={() => <DashboardPage socket={socket} />}\n          exact\n        />\n        <Route\n          path=\"/contacts\"\n          render={() => <Contacts socket={socket} />}\n          exact\n        />\n        <Route\n          path=\"/signup\"\n          exact\n          render={() => <Register socket={socket} />}\n        />\n        <Route path=\"/group\" exact>\n          <GroupPage />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch >\n    );\n  } else {\n    routes = (<Switch>\n      <Route\n        path=\"/\"\n        render={() => <IndexPage socket={socket} />}\n        exact />\n      <Route path=\"/register\" component={Register} exact />\n      <Route path=\"/login\" render={() => <LoginPage setupSocket={setSocket} />} exact />\n      <Redirect to=\"/\" />\n    </Switch>\n    );\n  }\n  return (\n    <Router>\n      <NavBar />\n      <main>\n        {routes}\n      </main>\n    </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\store.js",["147"],"const { logger } = require('redux-logger')\r\nconst thunkMiddleware = require('redux-thunk').default\r\nconst { createStore, applyMiddleware } = require('redux')\r\nconst { composeWithDevTools } = require('redux-devtools-extension')\r\nconst thunk = require('redux-thunk').default\r\nconst rootReducer = require('./rootReducer')\r\nconst userReducer = require('./user/reducer')\r\n\r\nconst store = createStore(\r\n    rootReducer, composeWithDevTools(applyMiddleware(logger, thunk, thunkMiddleware))\r\n)\r\nexport default store\r\n","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\rootReducer.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\user\\reducer.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\user\\actions.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\conversations\\actions.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\conversations\\reducer.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\DAL\\index.js",["148"],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\user\\types.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\contacts\\reducer.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\conversations\\types.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\contacts\\types.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\contacts\\actions.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\LoginPage.jsx",["149","150","151","152","153","154","155"],"import React, { useState, useContext, useEffect } from 'react'\r\n// import makeToast from \"../Toaster\";\r\nimport { withRouter, useHistory } from \"react-router-dom\";\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { login, signup } from '../redux/user/actions'\r\nimport Card from '../components/UIElemets/Card';\r\n// const { signUp } = require('../DAL/index')\r\nconst LoginPage = ({ setupSocket }) => {\r\n    const dispatch = useDispatch()\r\n    const { user, error, loading } = useSelector(state => state.user)\r\n    const [isLoginMode, setIsLoginMode] = useState(true)   // const auth = useContext(AuthContext)\r\n    const [userDetails, setUseDetails] = useState({})\r\n    const history = useHistory()\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n\r\n\r\n    const hadleChange = (e) => {\r\n        setUseDetails({ ...userDetails, [e.target.id]: e.target.value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            setupSocket()\r\n            history.push(\"/conversations\");\r\n        }\r\n    }, [])\r\n    // useEffect(() => {\r\n    //     if (user) {\r\n    //         history.push(\"/conversations\");\r\n    //     } else {\r\n    //         setErrorMessage(error)\r\n    //     }\r\n\r\n    // }, [user, error, loading])\r\n    const loginUser = async (e) => {\r\n        console.log('user', e)\r\n        e.preventDefault()\r\n        const { email, password } = userDetails\r\n        if (isLoginMode) {\r\n            dispatch(login(email, password))\r\n\r\n\r\n            // const result = await login(userDetails.email, userDetails.password)\r\n            // if (!result.message) {\r\n            //     localStorage.setItem(\"CC_Token\", result.token);\r\n            //     localStorage.setItem(\"userId\", result._id);\r\n            //     localStorage.setItem(\"userName\", result.firstName);\r\n            //     auth.login()\r\n            //     history.push(\"/dashboard\");\r\n            // } else {\r\n            //     setErrorMessage(result.message)\r\n            // }\r\n        } else {\r\n            dispatch(signup(userDetails))\r\n            // const result = await signUp({ ...userDetails })\r\n            // if (!result.message) {\r\n            //     setIsLoginMode(true)\r\n            // } else {\r\n            //     setErrorMessage(result.message)\r\n            // }\r\n\r\n\r\n        }\r\n    };\r\n    const switchModehandler = () => {\r\n        setIsLoginMode(!isLoginMode)\r\n    }\r\n\r\n    return (\r\n        <Card >\r\n            <h2 >{isLoginMode ? 'Login' : 'Sign-Up'}</h2>\r\n            {errorMessage && <p>{errorMessage}</p>}\r\n            {loading && <p>loading</p>}\r\n            <hr />\r\n            <form onSubmit={loginUser}>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    <input\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        id=\"email\"\r\n                        placeholder=\"abc@example.com\"\r\n                        onChange={hadleChange}\r\n                        value={userDetails.email}\r\n                    />\r\n                </div>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"password\">Password</label>\r\n                    <input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        id=\"password\"\r\n                        placeholder=\"123gggewr\"\r\n                        onChange={hadleChange}\r\n                    />\r\n                </div>\r\n                {!isLoginMode && <>\r\n                    <div className=\"form-control\">\r\n                        <label htmlFor=\"firstName\">first Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            id=\"firstName\"\r\n                            placeholder=\"Yehuda\"\r\n                            onChange={hadleChange}\r\n                            value={userDetails.firstName}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-control\">\r\n                        <label htmlFor=\"lastName\">last Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"lastName\"\r\n                            id=\"lastName\"\r\n                            placeholder=\"Cohen\"\r\n                            onChange={hadleChange}\r\n                        />\r\n                    </div>\r\n                </>\r\n                }\r\n\r\n                <button type=\"submit\" >{isLoginMode ? 'Login' : 'Sign-Up'}</button>\r\n            </form>\r\n            <button inverse onClick={switchModehandler}>Switch to {!isLoginMode ? 'Login' : 'Sign-Up'}</button>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        userData: state.user\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        login: (email, password) => dispatch(login(email, password))\r\n    }\r\n}\r\n\r\nexport default withRouter(LoginPage);",["156","157"],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\DashboardPage.jsx",["158","159","160","161","162","163","164","165"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { allConversations, getRoomChat } from '../redux/conversations/actions'\r\nconst { addConversation, getUserConversations } = require('../DAL/index')\r\nconst DashboardPage = (props) => {\r\n    const { conversations } = useSelector(state => state.conversations)\r\n    console.log('conversations', conversations)\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    const [name, setName] = useState('')\r\n    useEffect(() => {\r\n        dispatch(allConversations())\r\n    }, [])\r\n    let socket;\r\n    const CONNECTION_PORT = \"localhost:5000/\";\r\n    const [chatrooms, setChatrooms] = useState([]);\r\n    const getChatrooms = () => {\r\n        axios\r\n            .post(\"http://localhost:5000/api/conversation/room\", {\r\n                headers: {\r\n                    Authorization: \"Bearer \" + localStorage.getItem(\"CC_Token\"),\r\n                },\r\n            })\r\n            .then((response) => {\r\n                setChatrooms(response.data);\r\n            })\r\n            .catch((err) => {\r\n                setTimeout(getChatrooms, 3000);\r\n            });\r\n    };\r\n    const joinToRoom = (roomId) => {\r\n        console.log('room is', roomId)\r\n        dispatch(getRoomChat(roomId))\r\n        history.push('/chatroom')\r\n    }\r\n    useEffect(async () => {\r\n\r\n        const userId = localStorage.getItem('userId')\r\n        const conversations = await getUserConversations(userId)\r\n        console.log('chat rooms', conversations)\r\n        setChatrooms(conversations)\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n\r\n    const addChatroom = async () => {\r\n        const result = await addConversation(name);\r\n        console.log(result)\r\n    }\r\n    return (\r\n        <div >\r\n            <div className=\"cardHeader\">Chatrooms</div>\r\n            <div className=\"cardBody\">\r\n                <div className=\"inputGroup\">\r\n                    <label htmlFor=\"chatroomName\">Chatroom Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"chatroomName\"\r\n                        id=\"chatroomName\"\r\n                        onChange={(e) => setName(e.target.value)}\r\n                        placeholder=\"ChatterBox Nepal\"\r\n\r\n                    />\r\n                </div>\r\n            </div>\r\n            <button onClick={addChatroom}>Create Chatroom</button>\r\n            <div className=\"chatrooms\">\r\n                {conversations && conversations.map((chatroom) => (\r\n                    <div key={chatroom._id} className=\"chatroom\">\r\n                        <div>{chatroom.name || chatroom._id}</div>\r\n                        <li onClick={() => joinToRoom(chatroom._id)}>\r\n                            <div className=\"join\">Join</div>\r\n                        </li>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default DashboardPage","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\GroupPage.jsx",["166","167","168","169"],"import React, { useState, useEffect } from 'react'\r\nimport Multiselect from 'multiselect-react-dropdown';\r\n// import Button from '../FormElements/Button';\r\nimport Card from '../components/UIElemets/Card'\r\n\r\nimport { useHistory } from 'react-router-dom'\r\nconst { getUserContacts, addConversation } = require('../DAL/index')\r\nexport default function GroupPage() {\r\n    const [selectedValues, setSelectedValues] = useState(true)\r\n    const [name, setName] = useState('')\r\n    const [contacts, setContacts] = useState([])\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const history = useHistory()\r\n    const userId = localStorage.getItem('userId')\r\n    const userName = localStorage.getItem('userName')\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const result = await addConversation(name, [...selectedValues, { name: userName, userId }], userId)\r\n        if (!result.message) {\r\n            history.push(`chatroom/${result._id}`)\r\n        }\r\n    }\r\n    useEffect(async () => {\r\n        const userContacts = await getUserContacts(userId)\r\n        setContacts(userContacts)\r\n    }, [])\r\n    const hadleChange = (e) => {\r\n        setName(e.target.value)\r\n    }\r\n    return (\r\n        <Card>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"name\">group Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        placeholder=\"sport room\"\r\n                        onChange={hadleChange}\r\n                    />\r\n                </div>\r\n                <Multiselect options={contacts}\r\n                    selectedValue={contacts}\r\n                    onSelect={(data) => { setSelectedValues(data) }}\r\n                    onRemove={(data) => { setSelectedValues(data) }}\r\n                    displayValue={'name'}\r\n\r\n                />\r\n                <button type=\"submit\" >Create</button>\r\n            </form>\r\n        </Card >\r\n    )\r\n}\r\n","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\IndexPage.jsx",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\Register.jsx",["170","171","172","173","174","175"],"import React, { useEffect, useState } from \"react\";\r\nimport * as Yup from 'yup'\r\nimport { useFormik } from \"formik\";\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { login, signup } from '../redux/user/actions'\r\nconst Register = () => {\r\n    const { user, error, loading } = useSelector(state => state.user)\r\n    const dispatch = useDispatch()\r\n    const SUPPORTED_FORMATS = [\r\n        \"jpg\",\r\n        \"jpeg\",\r\n        \"gif\",\r\n        \"png\",\r\n        \"webp\"\r\n    ];\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            profileImage: \"\"\r\n        },\r\n        validationSchema: Yup.object({\r\n            firstName: Yup.string()\r\n                .max(20, 'Must be 15 characters or less')\r\n                .min(3)\r\n                .required('please enter your first name'),\r\n            lastName: Yup.string()\r\n                .max(20, 'Must be 20 characters or less')\r\n                .min(3)\r\n                .required('please enter your last name'),\r\n            email: Yup.string()\r\n                .email('Email is invalid')\r\n                .required('Email is required'),\r\n            password: Yup.string()\r\n                .min(8, 'Password must be at least 8 charaters')\r\n                .required('Password is required'),\r\n            confirmPassword: Yup.string()\r\n                .oneOf([Yup.ref('password'), null], 'Password musts match')\r\n                .required('Confirm password is required'),\r\n            profileImage: Yup.mixed().required(\"You need to provide a file\").test(\"fileFormat\",\r\n                \"Unsupported Format, valid formats: png,jpeg,gif,jpg\",\r\n                value => value && SUPPORTED_FORMATS.includes(value.split('.')[1])),\r\n        }),\r\n        onSubmit: (values) => {\r\n            console.log('values', values)\r\n            const data = new FormData();\r\n            data.append(\"userDetails\", JSON.stringify(values))\r\n            data.append('image', formik.values.profileImage)\r\n            dispatch(signup(data))\r\n        },\r\n    })\r\n    return <>\r\n        {loading && <p>loading</p>}\r\n        <form onSubmit={formik.handleSubmit} method=\"POST\">\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"firstName\">firstName</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"firstName\"\r\n                    id=\"firstName\"\r\n                    placeholder=\"abc@example.com\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.firstName}\r\n                />\r\n                {formik.touched.firstName && formik.errors.firstName ? <small className='text-danger'>{formik.errors.firstName} </small> : \"\"}\r\n\r\n            </div>\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"lastName\">lastName</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"lastName\"\r\n                    id=\"lastName\"\r\n                    placeholder=\"abc@example.com\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.lastName}\r\n                />\r\n                {formik.touched.lastName && formik.errors.lastName ? <small className='text-danger'>{formik.errors.lastName} </small> : \"\"}\r\n            </div>\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"email\">Email</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"email\"\r\n                    id=\"email\"\r\n                    placeholder=\"abc@example.com\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.email}\r\n                />\r\n                {formik.touched.email && formik.errors.email ? <small className='text-danger'>{formik.errors.email} </small> : \"\"}\r\n            </div>\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"abc@example.com\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.password}\r\n                />\r\n                {formik.touched.password && formik.errors.password ? <small className='text-danger'>{formik.errors.password} </small> : \"\"}\r\n            </div>\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"confirmPassword\">confirm Password</label>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"confirmPassword\"\r\n                    id=\"confirmPassword\"\r\n                    placeholder=\"abc@example.com\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.confirmPassword}\r\n                />\r\n                {formik.touched.confirmPassword && formik.errors.confirmPassword ? <small className='text-danger'>{formik.errors.confirmPassword} </small> : \"\"}\r\n            </div>\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"profileImage\">profile Image</label>\r\n                <input\r\n                    type=\"file\"\r\n                    name=\"profileImage\"\r\n                    placeholder=\"abc@example.com\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.profileImage}\r\n                />\r\n                {formik.touched.profileImage && formik.errors.profileImage ? <small className='text-danger'>{formik.errors.profileImage} </small> : \"\"}\r\n            </div>\r\n            <button type=\"submit\" >submit</button>\r\n        </form>\r\n    </>\r\n\r\n\r\n\r\n\r\n\r\n}\r\nexport default Register","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\Contacts.jsx",["176","177"],"import { useEffect, useState } from \"react\"\r\nimport { useSelector } from 'react-redux'\r\nconst Contacts = () => {\r\n    const { users } = useSelector(state => state.contacts)\r\n\r\n    return <>\r\n        {\r\n            users && users.map((user, i) => {\r\n                return <li key={i} > {user.name} </li>\r\n            })\r\n        }\r\n    </>\r\n\r\n}\r\nexport default Contacts","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\LiveChat.jsx",["178","179","180","181","182","183","184"],"import React, { useState, useEffect } from 'react'\r\nimport io from 'socket.io-client'\r\nimport socketIOClient from 'socket.io-client'\r\nimport { getRoomChat, afterPostMessage } from '../redux/conversations/actions'\r\nimport { connect, useSelector, useDispatch } from 'react-redux'\r\nfunction LiveChat() {\r\n    let socket\r\n    const [message, setMessage] = useState('')\r\n    const [typing, setTyping] = useState(false)\r\n    const { messages, members, loading, error, name2, currentRoom } = useSelector(state => state.conversations)\r\n    const { user } = useSelector(state => state.user)\r\n    const dispatch = useDispatch()\r\n    const userId = localStorage.getItem('userId')\r\n    const name = localStorage.getItem('userName')\r\n    const chatroomId = currentRoom\r\n\r\n    useEffect(() => {\r\n        socket = socketIOClient.connect(\"http://localhost:5000\");\r\n        console.log('socket', socket)\r\n        if (socket) {\r\n            socket.emit(\"joinRoom\", {\r\n                chatroomId, userId\r\n            });\r\n\r\n            socket.on(\"newMessage\", ({ newMessage }) => {\r\n                dispatch(afterPostMessage(newMessage))\r\n            });\r\n            socket.on(\"typing\", user => {\r\n                setTyping(`${user} is typing...`)\r\n            })\r\n            socket.emit(\"joinRoom\", {\r\n                chatroomId, userId\r\n            });\r\n\r\n        }\r\n        return () => {\r\n            //Component Unmount\r\n            if (socket) {\r\n                socket.emit(\"leaveRoom\", {\r\n                    chatroomId,\r\n                });\r\n            }\r\n        };\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        setTimeout(() => {\r\n            setTyping(false)\r\n        }, 5000)\r\n    }, [typing])\r\n\r\n    const sendUserAction = (e) => {\r\n        const user = localStorage.getItem('userName')\r\n        setMessage(e.target.value)\r\n        if (socket) {\r\n            socket.emit('typing', user)\r\n        }\r\n    }\r\n    const sendMessage = () => {\r\n        const chatMessage = {\r\n            chatroomId: currentRoom,\r\n            message: { userId: localStorage.getItem('userId'), name, content: message, date: Date.now() },\r\n            userId: localStorage.getItem('userId')\r\n        }\r\n        if (socket) {\r\n            socket.emit(\"chatroomMessage\", chatMessage);\r\n\r\n            setMessage(\"\");\r\n\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            {loading && <li>loading</li>}\r\n            {error && <li>{error}</li>}\r\n            {name && <h2>{name}</h2>}\r\n            {typing && <p>{typing}</p>}\r\n            {messages.length === 0 ? <p>there is no conversations</p> : (<div className=\"chatroomContent\">\r\n                {messages.map((message, i) => (\r\n\r\n                    <div key={i} className=\"message\">\r\n                        <span\r\n                            className={\r\n                                ' ' === message.userId ? \"ownMessage\" : \"otherMessage\"\r\n                            }\r\n                        >\r\n                            {message.userId === '' ? message.viewers === true ? 'VV  ' : 'V ' : ''}\r\n                            {message.name}:\r\n                        </span>{\" \"}\r\n                        {message.content}\r\n                    </div>\r\n                ))}\r\n            </div>)}\r\n            <div className=\"chatroomActions\">\r\n                <div>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"message\"\r\n                        placeholder=\"Say something!\"\r\n                        onChange={sendUserAction}\r\n                        value={message}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button className=\"join\" onClick={sendMessage}>\r\n                        Send\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LiveChat\r\n","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\DashboardPage.jsx",["185","186","187","188","189","190","191"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { allConversations, getRoomChat } from '../redux/conversations/actions'\r\nconst { addConversation, getUserConversations } = require('../DAL/index')\r\nconst DashboardPage = (props) => {\r\n    const { conversations } = useSelector(state => state.conversations)\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    const [name, setName] = useState('')\r\n    useEffect(() => {\r\n        dispatch(allConversations())\r\n    }, [])\r\n\r\n    const joinToRoom = (roomId) => {\r\n        dispatch(getRoomChat(roomId))\r\n        history.push('/chatroom')\r\n    }\r\n    useEffect(async () => {\r\n        const userId = localStorage.getItem('userId')\r\n        const conversations = await getUserConversations(userId)\r\n        setChatrooms(conversations)\r\n    }, []);\r\n\r\n    const addChatroom = async () => {\r\n        const result = await addConversation(name);\r\n    }\r\n    return (\r\n        <div >\r\n            <div className=\"cardHeader\">Chatrooms</div>\r\n            <div className=\"cardBody\">\r\n                <div className=\"inputGroup\">\r\n                    <label htmlFor=\"chatroomName\">Chatroom Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"chatroomName\"\r\n                        id=\"chatroomName\"\r\n                        className=\"input\"\r\n                        onChange={(e) => setName(e.target.value)}\r\n                        placeholder=\"ChatterBox Nepal\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            <button onClick={addChatroom} className=\"heading-secondary\">Create Chatroom</button>\r\n            <div className=\"chatrooms\">\r\n                {conversations && conversations.map((chatroom) => (\r\n                    <div key={chatroom._id} >\r\n                        <div className=\"d-flex center\">\r\n                            <h4 className=\"heading-tertiary card__heading-span\">{chatroom.name || chatroom._id}</h4>\r\n                            <button className=\" btn btn--green\" onClick={() => joinToRoom(chatroom._id)}>Join</button>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default DashboardPage","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\LoginPage.jsx",["192","193","194"],"import React, { useState, useEffect } from 'react'\r\nimport { withRouter, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { login, signup } from '../redux/user/actions'\r\nimport Card from '../components/UIElemets/Card';\r\nimport Register from './Register';\r\nconst LoginPage = ({ setupSocket }) => {\r\n    const dispatch = useDispatch()\r\n    const { user, error, loading } = useSelector(state => state.user)\r\n    const [isLoginMode, setIsLoginMode] = useState(true)   // const auth = useContext(AuthContext)\r\n    const [userDetails, setUseDetails] = useState({})\r\n    const history = useHistory()\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n\r\n\r\n    const hadleChange = (e) => {\r\n        setUseDetails({ ...userDetails, [e.target.id]: e.target.value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            setupSocket()\r\n            history.push(\"/conversations\");\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        if (user) {\r\n            history.push(\"/conversations\");\r\n        } else {\r\n            setErrorMessage(error)\r\n        }\r\n    }, [user, error, loading])\r\n    const loginUser = async (e) => {\r\n        console.log('user', e)\r\n        e.preventDefault()\r\n        const { email, password } = userDetails\r\n        if (isLoginMode) {\r\n            dispatch(login(email, password))\r\n        } else {\r\n            dispatch(signup(userDetails))\r\n        }\r\n    };\r\n    const switchModehandler = () => {\r\n        setIsLoginMode(!isLoginMode)\r\n    }\r\n\r\n    return (\r\n        < >\r\n            <h2 >{isLoginMode ? 'Login' : 'Sign-Up'}</h2>\r\n            {errorMessage && <p>{errorMessage}</p>}\r\n            {loading && <p>loading</p>}\r\n            <hr />\r\n            {isLoginMode ? (<form onSubmit={loginUser}>\r\n                <label htmlFor=\"email\"\r\n                    className='form__label'>Email</label>\r\n                <input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    className='form__input'\r\n                    placeholder=\"abc@example.com\"\r\n                    onChange={hadleChange}\r\n                    value={userDetails.email}\r\n                />\r\n                <label htmlFor=\"password\" className='form__label'>Password</label>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    className='form__input'\r\n                    placeholder=\"123gggewr\"\r\n                    onChange={hadleChange}\r\n                />\r\n\r\n                <button type=\"submit\" className='btn btn--green' >{isLoginMode ? 'Login' : 'Sign-Up'}</button>\r\n            </form>) : (<Register />)}\r\n            <button inverse onClick={switchModehandler} className='btn'>Switch to {!isLoginMode ? 'Login' : 'Sign-Up'}</button>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default withRouter(LoginPage);","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\IndexPage.jsx",["195"],"import React from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nconst IndexPage = (props) => {\r\n  const history = useHistory()\r\n  React.useEffect(() => {\r\n    const token = localStorage.getItem(\"token\");\r\n    console.log(token);\r\n    if (token) {\r\n      history.push(\"/conversations\");\r\n    } else {\r\n      history.push(\"/login\");\r\n    }\r\n   \r\n  }, []);\r\n  return <div></div>;\r\n};\r\n\r\nexport default IndexPage;","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\GroupPage.jsx",["196","197","198","199"],"import React, { useState, useEffect } from 'react'\r\nimport Multiselect from 'multiselect-react-dropdown';\r\nimport Card from '../components/UIElemets/Card'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux';\r\nimport { addConversation } from '../DAL/index'\r\nimport { fetchUsers } from '../redux/contacts/actions'\r\nexport default function GroupPage() {\r\n    const dispatch = useDispatch()\r\n    const [selectedValues, setSelectedValues] = useState(true)\r\n    const [name, setName] = useState('')\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const history = useHistory()\r\n    const userId = localStorage.getItem('userId')\r\n    const userName = localStorage.getItem('userName')\r\n    const { users } = useSelector(state => state.contacts)\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const result = await addConversation(name, [...selectedValues, { name: userName, userId }], userId)\r\n        if (!result.message) {\r\n            history.push(`/chatroom`)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (users.length || !users) dispatch(fetchUsers())\r\n    }, []\r\n    )\r\n    const hadleChange = (e) => {\r\n        setName(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"name\">group Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        placeholder=\"sport room\"\r\n                        onChange={hadleChange}\r\n                    />\r\n                </div>\r\n                <Multiselect options={users}\r\n                    selectedValue={users}\r\n                    onSelect={(data) => { setSelectedValues(data) }}\r\n                    onRemove={(data) => { setSelectedValues(data) }}\r\n                    displayValue={'name'}\r\n                />\r\n                <button type=\"submit\" >Create</button>\r\n            </form>\r\n        </Card >\r\n    )\r\n}\r\n","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\Register.jsx",["200","201","202","203","204","205"],"import React, { useEffect, useState } from \"react\";\r\nimport * as Yup from 'yup'\r\nimport { useFormik } from \"formik\";\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { login, signup } from '../redux/user/actions'\r\nconst Register = () => {\r\n    const { user, error, loading } = useSelector(state => state.user)\r\n\r\n    const dispatch = useDispatch()\r\n    const SUPPORTED_FORMATS = [\"jpg\", \"jpeg\", \"gif\", \"png\", \"webp\"];\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            profileImage: \"\"\r\n        },\r\n        validationSchema: Yup.object({\r\n            firstName: Yup.string()\r\n                .max(20, 'Must be 15 characters or less')\r\n                .min(3)\r\n                .required('please enter your first name'),\r\n            lastName: Yup.string()\r\n                .max(20, 'Must be 20 characters or less')\r\n                .min(3)\r\n                .required('please enter your last name'),\r\n            email: Yup.string()\r\n                .email('Email is invalid')\r\n                .required('Email is required'),\r\n            password: Yup.string()\r\n                .min(8, 'Password must be at least 8 charaters')\r\n                .required('Password is required'),\r\n            confirmPassword: Yup.string()\r\n                .oneOf([Yup.ref('password'), null], 'Password musts match')\r\n                .required('Confirm password is required'),\r\n            profileImage: Yup.mixed().required(\"You need to provide a file\").test(\"fileFormat\",\r\n                \"Unsupported Format, valid formats: png,jpeg,gif,jpg\",\r\n                value => value && SUPPORTED_FORMATS.includes(value.split('.')[1])),\r\n        }),\r\n        onSubmit: (values) => {\r\n            console.log('values', values)\r\n            const data = new FormData();\r\n            data.append(\"userDetails\", JSON.stringify(values))\r\n            data.append('image', formik.values.profileImage)\r\n            dispatch(signup(data))\r\n        },\r\n    })\r\n    return <>\r\n        {loading && <p>loading</p>}\r\n        <form onSubmit={formik.handleSubmit} method=\"POST\">\r\n\r\n            <label htmlFor=\"firstName\" className='form__label'>firstName</label>\r\n            <input\r\n                type=\"text\"\r\n                name=\"firstName\"\r\n                className='form__input'\r\n                placeholder=\"abc@example.com\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.firstName}\r\n            />\r\n            {formik.touched.firstName && formik.errors.firstName ? <small className='text-danger'>{formik.errors.firstName} </small> : \"\"}\r\n            <label htmlFor=\"lastName\" >lastName</label>\r\n            <input\r\n                type=\"text\"\r\n                name=\"lastName\"\r\n                className='form__input'\r\n                placeholder=\"abc@example.com\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.lastName}\r\n            />\r\n            {formik.touched.lastName && formik.errors.lastName ? <small className='text-danger'>{formik.errors.lastName} </small> : \"\"}\r\n\r\n\r\n            <label htmlFor=\"email\">Email</label>\r\n            <input\r\n                type=\"text\"\r\n                name=\"email\"\r\n                className='form__input'\r\n                placeholder=\"abc@example.com\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.email}\r\n            />\r\n            {formik.touched.email && formik.errors.email ? <small className='text-danger'>{formik.errors.email} </small> : \"\"}\r\n\r\n\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                className='form__input'\r\n                onChange={formik.handleChange}\r\n                value={formik.values.password}\r\n            />\r\n            {formik.touched.password && formik.errors.password ? <small className='text-danger'>{formik.errors.password} </small> : \"\"}\r\n\r\n\r\n            <label htmlFor=\"confirmPassword\">confirm Password</label>\r\n            <input\r\n                type=\"password\"\r\n                name=\"confirmPassword\"\r\n                className='form__input'\r\n\r\n                onChange={formik.handleChange}\r\n                value={formik.values.confirmPassword}\r\n            />\r\n            {formik.touched.confirmPassword && formik.errors.confirmPassword ? <small className='text-danger'>{formik.errors.confirmPassword} </small> : \"\"}\r\n\r\n\r\n            <label htmlFor=\"profileImage\">profile Image</label>\r\n            <input\r\n                type=\"file\"\r\n                name=\"profileImage\"\r\n                className='form__input'\r\n                onChange={formik.handleChange}\r\n                value={formik.values.profileImage}\r\n            />\r\n            {formik.touched.profileImage && formik.errors.profileImage ? <small className='text-danger'>{formik.errors.profileImage} </small> : \"\"}\r\n\r\n            <button type=\"submit\" className=\"btn btn--green\">submit</button>\r\n        </form>\r\n    </>\r\n\r\n\r\n\r\n\r\n\r\n}\r\nexport default Register","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\Contacts.jsx",["206","207"],"import { useEffect, useState } from \"react\"\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { fetchUsers } from '../redux/contacts/actions'\r\nconst Contacts = () => {\r\n    const dispatch = useDispatch()\r\n    const { users } = useSelector(state => state.contacts)\r\n    useEffect(() => {\r\n        if (!users.length) dispatch(fetchUsers())\r\n    }, [])\r\n    return <>\r\n        {\r\n            users && users.map((user, i) => {\r\n                return <li key={i} > {user.name} </li>\r\n            })\r\n        }\r\n    </>\r\n\r\n}\r\nexport default Contacts","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\LiveChat.jsx",["208","209","210","211"],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\components\\Navigation\\Navbar.jsx",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\components\\Navigation\\NavBar.jsx",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\components\\UIElemets\\Card.jsx",[],{"ruleId":"212","severity":1,"message":"213","line":6,"column":20,"nodeType":"214","messageId":"215","endLine":6,"endColumn":31},{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","severity":1,"message":"221","line":35,"column":6,"nodeType":"222","endLine":35,"endColumn":8,"suggestions":"223"},{"ruleId":"212","severity":1,"message":"224","line":7,"column":7,"nodeType":"214","messageId":"215","endLine":7,"endColumn":18},{"ruleId":"212","severity":1,"message":"225","line":66,"column":11,"nodeType":"214","messageId":"215","endLine":66,"endColumn":23},{"ruleId":"212","severity":1,"message":"226","line":1,"column":27,"nodeType":"214","messageId":"215","endLine":1,"endColumn":37},{"ruleId":"212","severity":1,"message":"227","line":4,"column":10,"nodeType":"214","messageId":"215","endLine":4,"endColumn":17},{"ruleId":"212","severity":1,"message":"228","line":10,"column":19,"nodeType":"214","messageId":"215","endLine":10,"endColumn":24},{"ruleId":"212","severity":1,"message":"229","line":14,"column":26,"nodeType":"214","messageId":"215","endLine":14,"endColumn":41},{"ruleId":"220","severity":1,"message":"230","line":26,"column":8,"nodeType":"222","endLine":26,"endColumn":10,"suggestions":"231"},{"ruleId":"212","severity":1,"message":"232","line":129,"column":7,"nodeType":"214","messageId":"215","endLine":129,"endColumn":22},{"ruleId":"212","severity":1,"message":"233","line":134,"column":7,"nodeType":"214","messageId":"215","endLine":134,"endColumn":25},{"ruleId":"216","replacedBy":"234"},{"ruleId":"218","replacedBy":"235"},{"ruleId":"212","severity":1,"message":"236","line":3,"column":10,"nodeType":"214","messageId":"215","endLine":3,"endColumn":14},{"ruleId":"212","severity":1,"message":"227","line":4,"column":10,"nodeType":"214","messageId":"215","endLine":4,"endColumn":17},{"ruleId":"220","severity":1,"message":"237","line":15,"column":8,"nodeType":"222","endLine":15,"endColumn":10,"suggestions":"238"},{"ruleId":"212","severity":1,"message":"239","line":16,"column":9,"nodeType":"214","messageId":"215","endLine":16,"endColumn":15},{"ruleId":"212","severity":1,"message":"240","line":17,"column":11,"nodeType":"214","messageId":"215","endLine":17,"endColumn":26},{"ruleId":"212","severity":1,"message":"241","line":18,"column":12,"nodeType":"214","messageId":"215","endLine":18,"endColumn":21},{"ruleId":"212","severity":1,"message":"242","line":19,"column":11,"nodeType":"214","messageId":"215","endLine":19,"endColumn":23},{"ruleId":"220","severity":1,"message":"243","line":38,"column":15,"nodeType":"244","endLine":45,"endColumn":6},{"ruleId":"212","severity":1,"message":"245","line":12,"column":12,"nodeType":"214","messageId":"215","endLine":12,"endColumn":24},{"ruleId":"212","severity":1,"message":"229","line":12,"column":26,"nodeType":"214","messageId":"215","endLine":12,"endColumn":41},{"ruleId":"220","severity":1,"message":"243","line":23,"column":15,"nodeType":"244","endLine":26,"endColumn":6},{"ruleId":"220","severity":1,"message":"246","line":26,"column":8,"nodeType":"222","endLine":26,"endColumn":10,"suggestions":"247"},{"ruleId":"212","severity":1,"message":"248","line":1,"column":17,"nodeType":"214","messageId":"215","endLine":1,"endColumn":26},{"ruleId":"212","severity":1,"message":"249","line":1,"column":28,"nodeType":"214","messageId":"215","endLine":1,"endColumn":36},{"ruleId":"212","severity":1,"message":"227","line":4,"column":10,"nodeType":"214","messageId":"215","endLine":4,"endColumn":17},{"ruleId":"212","severity":1,"message":"250","line":5,"column":10,"nodeType":"214","messageId":"215","endLine":5,"endColumn":15},{"ruleId":"212","severity":1,"message":"251","line":7,"column":13,"nodeType":"214","messageId":"215","endLine":7,"endColumn":17},{"ruleId":"212","severity":1,"message":"228","line":7,"column":19,"nodeType":"214","messageId":"215","endLine":7,"endColumn":24},{"ruleId":"212","severity":1,"message":"248","line":1,"column":10,"nodeType":"214","messageId":"215","endLine":1,"endColumn":19},{"ruleId":"212","severity":1,"message":"249","line":1,"column":21,"nodeType":"214","messageId":"215","endLine":1,"endColumn":29},{"ruleId":"212","severity":1,"message":"252","line":2,"column":8,"nodeType":"214","messageId":"215","endLine":2,"endColumn":10},{"ruleId":"212","severity":1,"message":"253","line":4,"column":10,"nodeType":"214","messageId":"215","endLine":4,"endColumn":21},{"ruleId":"212","severity":1,"message":"227","line":5,"column":10,"nodeType":"214","messageId":"215","endLine":5,"endColumn":17},{"ruleId":"212","severity":1,"message":"254","line":10,"column":23,"nodeType":"214","messageId":"215","endLine":10,"endColumn":30},{"ruleId":"212","severity":1,"message":"255","line":10,"column":48,"nodeType":"214","messageId":"215","endLine":10,"endColumn":53},{"ruleId":"212","severity":1,"message":"251","line":11,"column":13,"nodeType":"214","messageId":"215","endLine":11,"endColumn":17},{"ruleId":"220","severity":1,"message":"256","line":18,"column":18,"nodeType":"257","endLine":18,"endColumn":65},{"ruleId":"212","severity":1,"message":"258","line":2,"column":8,"nodeType":"214","messageId":"215","endLine":2,"endColumn":13},{"ruleId":"212","severity":1,"message":"236","line":3,"column":10,"nodeType":"214","messageId":"215","endLine":3,"endColumn":14},{"ruleId":"212","severity":1,"message":"227","line":4,"column":10,"nodeType":"214","messageId":"215","endLine":4,"endColumn":17},{"ruleId":"220","severity":1,"message":"237","line":14,"column":8,"nodeType":"222","endLine":14,"endColumn":10,"suggestions":"259"},{"ruleId":"220","severity":1,"message":"243","line":20,"column":15,"nodeType":"244","endLine":24,"endColumn":6},{"ruleId":"260","severity":2,"message":"261","line":23,"column":9,"nodeType":"214","messageId":"262","endLine":23,"endColumn":21},{"ruleId":"212","severity":1,"message":"263","line":27,"column":15,"nodeType":"214","messageId":"215","endLine":27,"endColumn":21},{"ruleId":"212","severity":1,"message":"264","line":5,"column":8,"nodeType":"214","messageId":"215","endLine":5,"endColumn":12},{"ruleId":"220","severity":1,"message":"230","line":25,"column":8,"nodeType":"222","endLine":25,"endColumn":10,"suggestions":"265"},{"ruleId":"220","severity":1,"message":"266","line":32,"column":8,"nodeType":"222","endLine":32,"endColumn":30,"suggestions":"267"},{"ruleId":"220","severity":1,"message":"268","line":14,"column":6,"nodeType":"222","endLine":14,"endColumn":8,"suggestions":"269"},{"ruleId":"260","severity":2,"message":"270","line":9,"column":22,"nodeType":"214","messageId":"262","endLine":9,"endColumn":33},{"ruleId":"212","severity":1,"message":"245","line":12,"column":12,"nodeType":"214","messageId":"215","endLine":12,"endColumn":24},{"ruleId":"212","severity":1,"message":"229","line":12,"column":26,"nodeType":"214","messageId":"215","endLine":12,"endColumn":41},{"ruleId":"220","severity":1,"message":"271","line":28,"column":8,"nodeType":"222","endLine":28,"endColumn":10,"suggestions":"272"},{"ruleId":"212","severity":1,"message":"248","line":1,"column":17,"nodeType":"214","messageId":"215","endLine":1,"endColumn":26},{"ruleId":"212","severity":1,"message":"249","line":1,"column":28,"nodeType":"214","messageId":"215","endLine":1,"endColumn":36},{"ruleId":"212","severity":1,"message":"227","line":4,"column":10,"nodeType":"214","messageId":"215","endLine":4,"endColumn":17},{"ruleId":"212","severity":1,"message":"250","line":5,"column":10,"nodeType":"214","messageId":"215","endLine":5,"endColumn":15},{"ruleId":"212","severity":1,"message":"251","line":7,"column":13,"nodeType":"214","messageId":"215","endLine":7,"endColumn":17},{"ruleId":"212","severity":1,"message":"228","line":7,"column":19,"nodeType":"214","messageId":"215","endLine":7,"endColumn":24},{"ruleId":"212","severity":1,"message":"249","line":1,"column":21,"nodeType":"214","messageId":"215","endLine":1,"endColumn":29},{"ruleId":"220","severity":1,"message":"273","line":9,"column":8,"nodeType":"222","endLine":9,"endColumn":10,"suggestions":"274"},{"ruleId":"212","severity":1,"message":"254","line":9,"column":23,"nodeType":"214","messageId":"215","endLine":9,"endColumn":30},{"ruleId":"212","severity":1,"message":"255","line":9,"column":48,"nodeType":"214","messageId":"215","endLine":9,"endColumn":53},{"ruleId":"212","severity":1,"message":"251","line":10,"column":13,"nodeType":"214","messageId":"215","endLine":10,"endColumn":17},{"ruleId":"220","severity":1,"message":"256","line":16,"column":18,"nodeType":"257","endLine":16,"endColumn":57},"no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","no-native-reassign",["275"],"no-negated-in-lhs",["276"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setupSocket'. Either include it or remove the dependency array.","ArrayExpression",["277"],"'userReducer' is assigned a value but never used.","'participants' is assigned a value but never used.","'useContext' is defined but never used.","'connect' is defined but never used.","'error' is assigned a value but never used.","'setErrorMessage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history', 'setupSocket', and 'user'. Either include them or remove the dependency array. If 'setupSocket' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["278"],"'mapStateToProps' is assigned a value but never used.","'mapDispatchToProps' is assigned a value but never used.",["275"],["276"],"'Link' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["279"],"'socket' is defined but never used.","'CONNECTION_PORT' is assigned a value but never used.","'chatrooms' is assigned a value but never used.","'getChatrooms' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'errorMessage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["280"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'login' is defined but never used.","'user' is assigned a value but never used.","'io' is defined but never used.","'getRoomChat' is defined but never used.","'members' is assigned a value but never used.","'name2' is assigned a value but never used.","Assignments to the 'socket' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'axios' is defined but never used.",["281"],"no-undef","'setChatrooms' is not defined.","undef","'result' is assigned a value but never used.","'Card' is defined but never used.",["282"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["283"],"React Hook React.useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["284"],"'useDispatch' is not defined.","React Hook useEffect has missing dependencies: 'dispatch' and 'users'. Either include them or remove the dependency array.",["285"],"React Hook useEffect has missing dependencies: 'dispatch' and 'users.length'. Either include them or remove the dependency array.",["286"],"no-global-assign","no-unsafe-negation",{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},{"desc":"291","fix":"295"},{"desc":"289","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},"Update the dependencies array to be: [setupSocket]",{"range":"305","text":"306"},"Update the dependencies array to be: [history, setupSocket, user]",{"range":"307","text":"308"},"Update the dependencies array to be: [dispatch]",{"range":"309","text":"310"},"Update the dependencies array to be: [userId]",{"range":"311","text":"312"},{"range":"313","text":"310"},{"range":"314","text":"308"},"Update the dependencies array to be: [user, error, loading, history]",{"range":"315","text":"316"},"Update the dependencies array to be: [history]",{"range":"317","text":"318"},"Update the dependencies array to be: [dispatch, users]",{"range":"319","text":"320"},"Update the dependencies array to be: [dispatch, users.length]",{"range":"321","text":"322"},[1151,1153],"[setupSocket]",[1033,1035],"[history, setupSocket, user]",[694,696],"[dispatch]",[1128,1130],"[userId]",[645,647],[961,963],[1127,1149],"[user, error, loading, history]",[360,362],"[history]",[1151,1153],"[dispatch, users]",[360,362],"[dispatch, users.length]"]