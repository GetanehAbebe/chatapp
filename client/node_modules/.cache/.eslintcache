[{"C:\\Users\\User\\Documents\\chatapp\\client\\src\\index.js":"1","C:\\Users\\User\\Documents\\chatapp\\client\\src\\App.js":"2","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\store.js":"3","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\rootReducer.js":"4","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\user\\reducer.js":"5","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\user\\actions.js":"6","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\conversations\\actions.js":"7","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\conversations\\reducer.js":"8","C:\\Users\\User\\Documents\\chatapp\\client\\src\\DAL\\index.js":"9","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\user\\types.js":"10","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\contacts\\reducer.js":"11","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\conversations\\types.js":"12","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\contacts\\types.js":"13","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\contacts\\actions.js":"14","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\LoginPage.jsx":"15","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\DashboardPage.jsx":"16","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\GroupPage.jsx":"17","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\IndexPage.jsx":"18","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\Register.jsx":"19","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\Contacts.jsx":"20","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\LiveChat.jsx":"21","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\DashboardPage.jsx":"22","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\LoginPage.jsx":"23","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\IndexPage.jsx":"24","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\GroupPage.jsx":"25","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\Register.jsx":"26","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\Contacts.jsx":"27","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\LiveChat.jsx":"28","C:\\Users\\User\\Documents\\chatapp\\client\\src\\components\\Navigation\\Navbar.jsx":"29","C:\\Users\\User\\Documents\\chatapp\\client\\src\\components\\Navigation\\NavBar.jsx":"30","C:\\Users\\User\\Documents\\chatapp\\client\\src\\components\\UIElemets\\Card.jsx":"31","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\Auth.jsx":"32","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\NewContact.jsx":"33","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\chat\\ChatFeed.jsx":"34","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\chat\\MyMessage.jsx":"35","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\chat\\TheirMessage.jsx":"36","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\chat\\MessageForm.jsx":"37","C:\\Users\\User\\Documents\\chatapp\\client\\src\\components\\Navigation\\SidebarData.js":"38","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\socket\\reducer.js":"39","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\socket\\actions.js":"40"},{"size":345,"mtime":1634727009142,"results":"41","hashOfConfig":"42"},{"size":1886,"mtime":1634907400093,"results":"43","hashOfConfig":"42"},{"size":509,"mtime":1634683695388,"results":"44","hashOfConfig":"42"},{"size":483,"mtime":1634906607610,"results":"45","hashOfConfig":"42"},{"size":1152,"mtime":1634676607726,"results":"46","hashOfConfig":"42"},{"size":2097,"mtime":1634740087021,"results":"47","hashOfConfig":"42"},{"size":2032,"mtime":1634844713339,"results":"48","hashOfConfig":"42"},{"size":1575,"mtime":1634844668129,"results":"49","hashOfConfig":"42"},{"size":2600,"mtime":1634843367542,"results":"50","hashOfConfig":"42"},{"size":491,"mtime":1634562360264,"results":"51","hashOfConfig":"42"},{"size":1610,"mtime":1634840020193,"results":"52","hashOfConfig":"42"},{"size":357,"mtime":1634664425407,"results":"53","hashOfConfig":"42"},{"size":394,"mtime":1634836695296,"results":"54","hashOfConfig":"42"},{"size":1871,"mtime":1634839903628,"results":"55","hashOfConfig":"42"},{"size":2879,"mtime":1634683436201,"results":"56","hashOfConfig":"42"},{"size":2412,"mtime":1634686081276,"results":"57","hashOfConfig":"42"},{"size":2102,"mtime":1634686613488,"results":"58","hashOfConfig":"42"},{"size":420,"mtime":1634683556496,"results":"59","hashOfConfig":"42"},{"size":5193,"mtime":1634683505290,"results":"60","hashOfConfig":"42"},{"size":558,"mtime":1634686494099,"results":"61","hashOfConfig":"42"},{"size":4112,"mtime":1634683590184,"results":"62","hashOfConfig":"42"},{"size":3924,"mtime":1634845458603,"results":"63","hashOfConfig":"42"},{"size":5030,"mtime":1634739274318,"results":"64","hashOfConfig":"42"},{"size":420,"mtime":1634683556496,"results":"65","hashOfConfig":"42"},{"size":2114,"mtime":1634711731431,"results":"66","hashOfConfig":"42"},{"size":8786,"mtime":1634740047839,"results":"67","hashOfConfig":"42"},{"size":3102,"mtime":1634840088769,"results":"68","hashOfConfig":"42"},{"size":4600,"mtime":1634808420925,"results":"69","hashOfConfig":"42"},{"size":1684,"mtime":1634679727576,"results":"70","hashOfConfig":"42"},{"size":2882,"mtime":1634823864158,"results":"71","hashOfConfig":"42"},{"size":224,"mtime":1634711662587,"results":"72","hashOfConfig":"42"},{"size":844,"mtime":1634736065621,"results":"73","hashOfConfig":"42"},{"size":2545,"mtime":1634744522080,"results":"74","hashOfConfig":"42"},{"size":2858,"mtime":1634904663620,"results":"75","hashOfConfig":"42"},{"size":625,"mtime":1634834537193,"results":"76","hashOfConfig":"42"},{"size":1216,"mtime":1634817162820,"results":"77","hashOfConfig":"42"},{"size":3108,"mtime":1634907391410,"results":"78","hashOfConfig":"42"},{"size":1346,"mtime":1634824565223,"results":"79","hashOfConfig":"42"},{"size":740,"mtime":1634906525655,"results":"80","hashOfConfig":"42"},{"size":975,"mtime":1634907004552,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},"svn0ed",{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"85"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"85"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"117"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"117"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"117"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"117"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"117"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"85"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"85"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"85"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"85"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"85"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"85"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"85"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"85"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"85"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\User\\Documents\\chatapp\\client\\src\\index.js",["182"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './sass/main.scss'\nimport { Provider, useSelector } from 'react-redux'\nimport store from './redux/store'\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById(\"root\"));\n",["183","184"],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\App.js",["185","186","187","188","189"],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\store.js",["190"],"const { logger } = require('redux-logger')\r\nconst thunkMiddleware = require('redux-thunk').default\r\nconst { createStore, applyMiddleware } = require('redux')\r\nconst { composeWithDevTools } = require('redux-devtools-extension')\r\nconst thunk = require('redux-thunk').default\r\nconst rootReducer = require('./rootReducer')\r\nconst userReducer = require('./user/reducer')\r\n\r\nconst store = createStore(\r\n    rootReducer, composeWithDevTools(applyMiddleware(logger, thunk, thunkMiddleware))\r\n)\r\nexport default store\r\n","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\rootReducer.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\user\\reducer.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\user\\actions.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\conversations\\actions.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\conversations\\reducer.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\DAL\\index.js",["191"],"const axios = require('axios');\r\n\r\nconst login = async (email, password) => {\r\n    try {\r\n        const response = await axios.post('http://localhost:5000/api/user/login', { email, password }, { withCredentials: true })\r\n        console.log('response', response)\r\n        return response.data\r\n    } catch (e) {\r\n        console.log('response', e)\r\n        return e\r\n    }\r\n};\r\n\r\nconst signUp = async (object) => {\r\n    try {\r\n        const response = await axios.post('http://localhost:5000/api/user/signup', { ...object }, { withCredentials: true })\r\n        return response.data\r\n    } catch (e) {\r\n        console.log(e)\r\n        return e\r\n    }\r\n};\r\n\r\nconst getUserConversations = async (userId) => {\r\n    const response = await axios.post('http://localhost:5000/api/conversation/get', {\r\n        userId,\r\n        headers: {\r\n            Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n        },\r\n    }, {\r\n        withCredentials: true,\r\n        headers: {\r\n            Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\r\n        },\r\n    })\r\n    return response.data\r\n};\r\n\r\n\r\nconst getRoomChat = async (roomId) => {\r\n    const response = await axios.post('http://localhost:5000/api/conversation/room', { roomId }, { withCredentials: true })\r\n    // console.log('response',response)\r\n    if (!response.data.message) {\r\n        const numOfMembers = response.data.participants.length\r\n        const viewers = response.data.messages.map(message => {\r\n            const newMessage = { ...message, viewers: (message.viewers.length === numOfMembers) }\r\n            return newMessage\r\n        })\r\n        response.data.messages = viewers\r\n\r\n        return response.data\r\n    }\r\n    return response.data\r\n};\r\nconst getUserContacts = async (userId) => {\r\n    const response = await axios.post('http://localhost:5000/api/contact', { userId }, { withCredentials: true })\r\n    return response.data\r\n};\r\nconst addToContacts = async (userId, users) => {\r\n    const response = await axios.post('http://localhost:5000/api/contact/add', { userId, ...users }, { withCredentials: true })\r\n    return response.data\r\n};\r\n\r\n\r\nconst addConversation = async (name, users) => {\r\n    const userId = localStorage.getItem('userId')\r\n    const participants = [{ name, users, userId }]\r\n    const response = await axios.post('http://localhost:5000/api/conversation', { name, userId, users }, { withCredentials: true })\r\n    return response.data\r\n};\r\n\r\nmodule.exports = {\r\n    login,\r\n    signUp,\r\n    getUserConversations,\r\n    getUserContacts,\r\n    addToContacts,\r\n    getRoomChat,\r\n    addConversation\r\n}","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\user\\types.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\contacts\\reducer.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\conversations\\types.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\contacts\\types.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\contacts\\actions.js",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\LoginPage.jsx",["192","193","194","195","196","197","198"],"import React, { useState, useContext, useEffect } from 'react'\r\n// import makeToast from \"../Toaster\";\r\nimport { withRouter, useHistory } from \"react-router-dom\";\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { login, signup } from '../redux/user/actions'\r\nimport Card from '../components/UIElemets/Card';\r\n// const { signUp } = require('../DAL/index')\r\nconst LoginPage = ({ setupSocket }) => {\r\n    const dispatch = useDispatch()\r\n    const { user, error, loading } = useSelector(state => state.user)\r\n    const [isLoginMode, setIsLoginMode] = useState(true)   // const auth = useContext(AuthContext)\r\n    const [userDetails, setUseDetails] = useState({})\r\n    const history = useHistory()\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n\r\n\r\n    const hadleChange = (e) => {\r\n        setUseDetails({ ...userDetails, [e.target.id]: e.target.value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            setupSocket()\r\n            history.push(\"/conversations\");\r\n        }\r\n    }, [])\r\n    // useEffect(() => {\r\n    //     if (user) {\r\n    //         history.push(\"/conversations\");\r\n    //     } else {\r\n    //         setErrorMessage(error)\r\n    //     }\r\n\r\n    // }, [user, error, loading])\r\n    const loginUser = async (e) => {\r\n        console.log('user', e)\r\n        e.preventDefault()\r\n        const { email, password } = userDetails\r\n        if (isLoginMode) {\r\n            dispatch(login(email, password))\r\n\r\n\r\n            // const result = await login(userDetails.email, userDetails.password)\r\n            // if (!result.message) {\r\n            //     localStorage.setItem(\"CC_Token\", result.token);\r\n            //     localStorage.setItem(\"userId\", result._id);\r\n            //     localStorage.setItem(\"userName\", result.firstName);\r\n            //     auth.login()\r\n            //     history.push(\"/dashboard\");\r\n            // } else {\r\n            //     setErrorMessage(result.message)\r\n            // }\r\n        } else {\r\n            dispatch(signup(userDetails))\r\n            // const result = await signUp({ ...userDetails })\r\n            // if (!result.message) {\r\n            //     setIsLoginMode(true)\r\n            // } else {\r\n            //     setErrorMessage(result.message)\r\n            // }\r\n\r\n\r\n        }\r\n    };\r\n    const switchModehandler = () => {\r\n        setIsLoginMode(!isLoginMode)\r\n    }\r\n\r\n    return (\r\n        <Card >\r\n            <h2 >{isLoginMode ? 'Login' : 'Sign-Up'}</h2>\r\n            {errorMessage && <p>{errorMessage}</p>}\r\n            {loading && <p>loading</p>}\r\n            <hr />\r\n            <form onSubmit={loginUser}>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    <input\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        id=\"email\"\r\n                        placeholder=\"abc@example.com\"\r\n                        onChange={hadleChange}\r\n                        value={userDetails.email}\r\n                    />\r\n                </div>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"password\">Password</label>\r\n                    <input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        id=\"password\"\r\n                        placeholder=\"123gggewr\"\r\n                        onChange={hadleChange}\r\n                    />\r\n                </div>\r\n                {!isLoginMode && <>\r\n                    <div className=\"form-control\">\r\n                        <label htmlFor=\"firstName\">first Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            id=\"firstName\"\r\n                            placeholder=\"Yehuda\"\r\n                            onChange={hadleChange}\r\n                            value={userDetails.firstName}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-control\">\r\n                        <label htmlFor=\"lastName\">last Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"lastName\"\r\n                            id=\"lastName\"\r\n                            placeholder=\"Cohen\"\r\n                            onChange={hadleChange}\r\n                        />\r\n                    </div>\r\n                </>\r\n                }\r\n\r\n                <button type=\"submit\" >{isLoginMode ? 'Login' : 'Sign-Up'}</button>\r\n            </form>\r\n            <button inverse onClick={switchModehandler}>Switch to {!isLoginMode ? 'Login' : 'Sign-Up'}</button>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        userData: state.user\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        login: (email, password) => dispatch(login(email, password))\r\n    }\r\n}\r\n\r\nexport default withRouter(LoginPage);",["199","200"],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\DashboardPage.jsx",["201","202","203","204","205","206","207","208"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { allConversations, getRoomChat } from '../redux/conversations/actions'\r\nconst { addConversation, getUserConversations } = require('../DAL/index')\r\nconst DashboardPage = (props) => {\r\n    const { conversations } = useSelector(state => state.conversations)\r\n    console.log('conversations', conversations)\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    const [name, setName] = useState('')\r\n    useEffect(() => {\r\n        dispatch(allConversations())\r\n    }, [])\r\n    let socket;\r\n    const CONNECTION_PORT = \"localhost:5000/\";\r\n    const [chatrooms, setChatrooms] = useState([]);\r\n    const getChatrooms = () => {\r\n        axios\r\n            .post(\"http://localhost:5000/api/conversation/room\", {\r\n                headers: {\r\n                    Authorization: \"Bearer \" + localStorage.getItem(\"CC_Token\"),\r\n                },\r\n            })\r\n            .then((response) => {\r\n                setChatrooms(response.data);\r\n            })\r\n            .catch((err) => {\r\n                setTimeout(getChatrooms, 3000);\r\n            });\r\n    };\r\n    const joinToRoom = (roomId) => {\r\n        console.log('room is', roomId)\r\n        dispatch(getRoomChat(roomId))\r\n        history.push('/chatroom')\r\n    }\r\n    useEffect(async () => {\r\n\r\n        const userId = localStorage.getItem('userId')\r\n        const conversations = await getUserConversations(userId)\r\n        console.log('chat rooms', conversations)\r\n        setChatrooms(conversations)\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n\r\n    const addChatroom = async () => {\r\n        const result = await addConversation(name);\r\n        console.log(result)\r\n    }\r\n    return (\r\n        <div >\r\n            <div className=\"cardHeader\">Chatrooms</div>\r\n            <div className=\"cardBody\">\r\n                <div className=\"inputGroup\">\r\n                    <label htmlFor=\"chatroomName\">Chatroom Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"chatroomName\"\r\n                        id=\"chatroomName\"\r\n                        onChange={(e) => setName(e.target.value)}\r\n                        placeholder=\"ChatterBox Nepal\"\r\n\r\n                    />\r\n                </div>\r\n            </div>\r\n            <button onClick={addChatroom}>Create Chatroom</button>\r\n            <div className=\"chatrooms\">\r\n                {conversations && conversations.map((chatroom) => (\r\n                    <div key={chatroom._id} className=\"chatroom\">\r\n                        <div>{chatroom.name || chatroom._id}</div>\r\n                        <li onClick={() => joinToRoom(chatroom._id)}>\r\n                            <div className=\"join\">Join</div>\r\n                        </li>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default DashboardPage","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\GroupPage.jsx",["209","210","211","212"],"import React, { useState, useEffect } from 'react'\r\nimport Multiselect from 'multiselect-react-dropdown';\r\n// import Button from '../FormElements/Button';\r\nimport Card from '../components/UIElemets/Card'\r\n\r\nimport { useHistory } from 'react-router-dom'\r\nconst { getUserContacts, addConversation } = require('../DAL/index')\r\nexport default function GroupPage() {\r\n    const [selectedValues, setSelectedValues] = useState(true)\r\n    const [name, setName] = useState('')\r\n    const [contacts, setContacts] = useState([])\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const history = useHistory()\r\n    const userId = localStorage.getItem('userId')\r\n    const userName = localStorage.getItem('userName')\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const result = await addConversation(name, [...selectedValues, { name: userName, userId }], userId)\r\n        if (!result.message) {\r\n            history.push(`chatroom/${result._id}`)\r\n        }\r\n    }\r\n    useEffect(async () => {\r\n        const userContacts = await getUserContacts(userId)\r\n        setContacts(userContacts)\r\n    }, [])\r\n    const hadleChange = (e) => {\r\n        setName(e.target.value)\r\n    }\r\n    return (\r\n        <Card>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"name\">group Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        placeholder=\"sport room\"\r\n                        onChange={hadleChange}\r\n                    />\r\n                </div>\r\n                <Multiselect options={contacts}\r\n                    selectedValue={contacts}\r\n                    onSelect={(data) => { setSelectedValues(data) }}\r\n                    onRemove={(data) => { setSelectedValues(data) }}\r\n                    displayValue={'name'}\r\n\r\n                />\r\n                <button type=\"submit\" >Create</button>\r\n            </form>\r\n        </Card >\r\n    )\r\n}\r\n","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\IndexPage.jsx",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\Register.jsx",["213","214","215","216","217","218"],"import React, { useEffect, useState } from \"react\";\r\nimport * as Yup from 'yup'\r\nimport { useFormik } from \"formik\";\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { login, signup } from '../redux/user/actions'\r\nconst Register = () => {\r\n    const { user, error, loading } = useSelector(state => state.user)\r\n    const dispatch = useDispatch()\r\n    const SUPPORTED_FORMATS = [\r\n        \"jpg\",\r\n        \"jpeg\",\r\n        \"gif\",\r\n        \"png\",\r\n        \"webp\"\r\n    ];\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            profileImage: \"\"\r\n        },\r\n        validationSchema: Yup.object({\r\n            firstName: Yup.string()\r\n                .max(20, 'Must be 15 characters or less')\r\n                .min(3)\r\n                .required('please enter your first name'),\r\n            lastName: Yup.string()\r\n                .max(20, 'Must be 20 characters or less')\r\n                .min(3)\r\n                .required('please enter your last name'),\r\n            email: Yup.string()\r\n                .email('Email is invalid')\r\n                .required('Email is required'),\r\n            password: Yup.string()\r\n                .min(8, 'Password must be at least 8 charaters')\r\n                .required('Password is required'),\r\n            confirmPassword: Yup.string()\r\n                .oneOf([Yup.ref('password'), null], 'Password musts match')\r\n                .required('Confirm password is required'),\r\n            profileImage: Yup.mixed().required(\"You need to provide a file\").test(\"fileFormat\",\r\n                \"Unsupported Format, valid formats: png,jpeg,gif,jpg\",\r\n                value => value && SUPPORTED_FORMATS.includes(value.split('.')[1])),\r\n        }),\r\n        onSubmit: (values) => {\r\n            console.log('values', values)\r\n            const data = new FormData();\r\n            data.append(\"userDetails\", JSON.stringify(values))\r\n            data.append('image', formik.values.profileImage)\r\n            dispatch(signup(data))\r\n        },\r\n    })\r\n    return <>\r\n        {loading && <p>loading</p>}\r\n        <form onSubmit={formik.handleSubmit} method=\"POST\">\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"firstName\">firstName</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"firstName\"\r\n                    id=\"firstName\"\r\n                    placeholder=\"abc@example.com\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.firstName}\r\n                />\r\n                {formik.touched.firstName && formik.errors.firstName ? <small className='text-danger'>{formik.errors.firstName} </small> : \"\"}\r\n\r\n            </div>\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"lastName\">lastName</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"lastName\"\r\n                    id=\"lastName\"\r\n                    placeholder=\"abc@example.com\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.lastName}\r\n                />\r\n                {formik.touched.lastName && formik.errors.lastName ? <small className='text-danger'>{formik.errors.lastName} </small> : \"\"}\r\n            </div>\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"email\">Email</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"email\"\r\n                    id=\"email\"\r\n                    placeholder=\"abc@example.com\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.email}\r\n                />\r\n                {formik.touched.email && formik.errors.email ? <small className='text-danger'>{formik.errors.email} </small> : \"\"}\r\n            </div>\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"abc@example.com\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.password}\r\n                />\r\n                {formik.touched.password && formik.errors.password ? <small className='text-danger'>{formik.errors.password} </small> : \"\"}\r\n            </div>\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"confirmPassword\">confirm Password</label>\r\n                <input\r\n                    type=\"password\"\r\n                    name=\"confirmPassword\"\r\n                    id=\"confirmPassword\"\r\n                    placeholder=\"abc@example.com\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.confirmPassword}\r\n                />\r\n                {formik.touched.confirmPassword && formik.errors.confirmPassword ? <small className='text-danger'>{formik.errors.confirmPassword} </small> : \"\"}\r\n            </div>\r\n            <div className=\"form-control\">\r\n                <label htmlFor=\"profileImage\">profile Image</label>\r\n                <input\r\n                    type=\"file\"\r\n                    name=\"profileImage\"\r\n                    placeholder=\"abc@example.com\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.profileImage}\r\n                />\r\n                {formik.touched.profileImage && formik.errors.profileImage ? <small className='text-danger'>{formik.errors.profileImage} </small> : \"\"}\r\n            </div>\r\n            <button type=\"submit\" >submit</button>\r\n        </form>\r\n    </>\r\n\r\n\r\n\r\n\r\n\r\n}\r\nexport default Register","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\Contacts.jsx",["219","220"],"import { useEffect, useState } from \"react\"\r\nimport { useSelector } from 'react-redux'\r\nconst Contacts = () => {\r\n    const { users } = useSelector(state => state.contacts)\r\n\r\n    return <>\r\n        {\r\n            users && users.map((user, i) => {\r\n                return <li key={i} > {user.name} </li>\r\n            })\r\n        }\r\n    </>\r\n\r\n}\r\nexport default Contacts","C:\\Users\\User\\Documents\\chatapp\\client\\src\\Pages\\LiveChat.jsx",["221","222","223","224","225","226","227"],"import React, { useState, useEffect } from 'react'\r\nimport io from 'socket.io-client'\r\nimport socketIOClient from 'socket.io-client'\r\nimport { getRoomChat, afterPostMessage } from '../redux/conversations/actions'\r\nimport { connect, useSelector, useDispatch } from 'react-redux'\r\nfunction LiveChat() {\r\n    let socket\r\n    const [message, setMessage] = useState('')\r\n    const [typing, setTyping] = useState(false)\r\n    const { messages, members, loading, error, name2, currentRoom } = useSelector(state => state.conversations)\r\n    const { user } = useSelector(state => state.user)\r\n    const dispatch = useDispatch()\r\n    const userId = localStorage.getItem('userId')\r\n    const name = localStorage.getItem('userName')\r\n    const chatroomId = currentRoom\r\n\r\n    useEffect(() => {\r\n        socket = socketIOClient.connect(\"http://localhost:5000\");\r\n        console.log('socket', socket)\r\n        if (socket) {\r\n            socket.emit(\"joinRoom\", {\r\n                chatroomId, userId\r\n            });\r\n\r\n            socket.on(\"newMessage\", ({ newMessage }) => {\r\n                dispatch(afterPostMessage(newMessage))\r\n            });\r\n            socket.on(\"typing\", user => {\r\n                setTyping(`${user} is typing...`)\r\n            })\r\n            socket.emit(\"joinRoom\", {\r\n                chatroomId, userId\r\n            });\r\n\r\n        }\r\n        return () => {\r\n            //Component Unmount\r\n            if (socket) {\r\n                socket.emit(\"leaveRoom\", {\r\n                    chatroomId,\r\n                });\r\n            }\r\n        };\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        setTimeout(() => {\r\n            setTyping(false)\r\n        }, 5000)\r\n    }, [typing])\r\n\r\n    const sendUserAction = (e) => {\r\n        const user = localStorage.getItem('userName')\r\n        setMessage(e.target.value)\r\n        if (socket) {\r\n            socket.emit('typing', user)\r\n        }\r\n    }\r\n    const sendMessage = () => {\r\n        const chatMessage = {\r\n            chatroomId: currentRoom,\r\n            message: { userId: localStorage.getItem('userId'), name, content: message, date: Date.now() },\r\n            userId: localStorage.getItem('userId')\r\n        }\r\n        if (socket) {\r\n            socket.emit(\"chatroomMessage\", chatMessage);\r\n\r\n            setMessage(\"\");\r\n\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            {loading && <li>loading</li>}\r\n            {error && <li>{error}</li>}\r\n            {name && <h2>{name}</h2>}\r\n            {typing && <p>{typing}</p>}\r\n            {messages.length === 0 ? <p>there is no conversations</p> : (<div className=\"chatroomContent\">\r\n                {messages.map((message, i) => (\r\n\r\n                    <div key={i} className=\"message\">\r\n                        <span\r\n                            className={\r\n                                ' ' === message.userId ? \"ownMessage\" : \"otherMessage\"\r\n                            }\r\n                        >\r\n                            {message.userId === '' ? message.viewers === true ? 'VV  ' : 'V ' : ''}\r\n                            {message.name}:\r\n                        </span>{\" \"}\r\n                        {message.content}\r\n                    </div>\r\n                ))}\r\n            </div>)}\r\n            <div className=\"chatroomActions\">\r\n                <div>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"message\"\r\n                        placeholder=\"Say something!\"\r\n                        onChange={sendUserAction}\r\n                        value={message}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button className=\"join\" onClick={sendMessage}>\r\n                        Send\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LiveChat\r\n","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\DashboardPage.jsx",["228","229","230","231","232","233","234"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Multiselect from \"multiselect-react-dropdown\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { allConversations, getRoomChat, createNewConversation } from '../redux/conversations/actions'\r\nimport { fetchUsers } from '../redux/contacts/actions'\r\nimport { Spinner } from \"react-bootstrap\";\r\nconst { addConversation, getUserConversations } = require('../DAL/index')\r\nconst DashboardPage = (props) => {\r\n    const { conversations, error, loading, success } = useSelector(state => state.conversations)\r\n    const { users } = useSelector(state => state.contacts)\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    const [name, setName] = useState('')\r\n    const [selectedContacts, setSelectedContacts] = useState([])\r\n\r\n    useEffect(() => {\r\n        dispatch(allConversations())\r\n    }, [])\r\n\r\n    const joinToRoom = (roomId) => {\r\n        dispatch(getRoomChat(roomId))\r\n        history.push('/newcontact')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!(users?.length)) dispatch(fetchUsers())\r\n    }, [])\r\n    const addChatroom = async (e) => {\r\n        e.preventDefault()\r\n        dispatch(createNewConversation(name, selectedContacts));\r\n    }\r\n    return (\r\n        <div className=\"text-center\">\r\n            <div className=\"heading-secondary\">Chatrooms</div>\r\n            <div>\r\n                <a href=\"#popup\" className=\"btn\">add conversation</a>\r\n            </div>\r\n            <div >\r\n                {conversations && conversations?.map((item, index) => (\r\n                    <li key={index} className={item.cName || 'nav-list'}>\r\n                        <p onClick={() => joinToRoom(item._id)} >\r\n                            {item.icon}\r\n                            <span>{item.name}</span>\r\n                        </p>\r\n                    </li>\r\n\r\n                ))}\r\n            </div>\r\n            <div class=\"popup\" id=\"popup\">\r\n                <form onSubmit={addChatroom}>\r\n                    <div class=\"popup__content\">\r\n                        <div class=\"popup__right\">\r\n                            <a href=\"#section-tours\" class=\"popup__close\">&times;</a>\r\n                            <h2 class=\"heading-secondary u-margin-bottom-small\">add conversation</h2>\r\n                            {error && <h4 className=\"text-danger\">{error}</h4>}\r\n                            {loading && <Spinner animation=\"border\" />}\r\n                            {success && <h4>the conversation created</h4>}\r\n                            <div class=\"form__group\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form__input\"\r\n                                    placeholder=\"groupe Name\"\r\n                                    required\r\n                                    id=\"group-name\"\r\n                                    onChange={e => setName(e.target.value)}\r\n                                />\r\n                                <label for=\"group-name\" class=\"form__label\">Group Name</label>\r\n                            </div>\r\n                            <Multiselect options={users}\r\n                                selectedValue={users}\r\n                                onSelect={(data) => { setSelectedContacts(data) }}\r\n                                onRemove={(data) => { setSelectedContacts(data) }}\r\n                                displayValue={'name'}\r\n                            />\r\n                            <button type=\"submit\" class=\"btn btn--green u-center-text\">\r\n                                create&rarr;\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div >\r\n\r\n    );\r\n};\r\nexport default DashboardPage","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\LoginPage.jsx",["235","236","237","238","239","240","241","242"],"import React, { useState, useEffect } from 'react'\r\nimport { withRouter, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { login, signup } from '../redux/user/actions'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCoffee, faSync } from '@fortawesome/free-solid-svg-icons'\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom'\r\nimport Card from '../components/UIElemets/Card';\r\nimport Register from './Register';\r\nconst LoginPage = ({ setupSocket }) => {\r\n    const dispatch = useDispatch()\r\n    const { user, error, loading } = useSelector(state => state.user)\r\n    const [isLoginMode, setIsLoginMode] = useState(true)   // const auth = useContext(AuthContext)\r\n    const [userDetails, setUseDetails] = useState({})\r\n    const history = useHistory()\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n\r\n\r\n    const hadleChange = (e) => {\r\n        setUseDetails({ ...userDetails, [e.target.id]: e.target.value })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            setupSocket()\r\n            history.push(\"/conversations\");\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        if (user) {\r\n            history.push(\"/conversations\");\r\n        } else {\r\n            setErrorMessage(error)\r\n        }\r\n    }, [user, error, loading])\r\n    const loginUser = async (e) => {\r\n        console.log('user', e)\r\n        e.preventDefault()\r\n        const { email, password } = userDetails\r\n        if (isLoginMode) {\r\n            dispatch(login(email, password))\r\n        } else {\r\n            dispatch(signup(userDetails))\r\n        }\r\n    };\r\n    const switchModehandler = () => {\r\n        setIsLoginMode(!isLoginMode)\r\n    }\r\n\r\n    return (\r\n        < >\r\n            <div class=\"row\">\r\n                <div class=\"book\">\r\n                    <div class=\"book__form\">\r\n                        <form onSubmit={loginUser} class=\"form\">\r\n                            <div class=\"u-center-text u-margin-bottom-medium\">\r\n                                <h2 class=\"heading-secondary\">Start messaging now</h2>\r\n                                <h2>login</h2>\r\n                                {errorMessage && <h3 className='text-danger'>{errorMessage}</h3>}\r\n                                {loading && <Spinner animation=\"border\" />}\r\n                            </div>\r\n                            <div class=\"form__group\">\r\n                                <input\r\n                                    type=\"email\"\r\n                                    class=\"form__input\"\r\n                                    required\r\n                                    id=\"email\"\r\n                                    placeholder=\"Email\"\r\n                                    onChange={hadleChange}\r\n                                    value={userDetails.email}\r\n                                />\r\n                                <label for=\"email\" class=\"form__label\">Email</label>\r\n                            </div>\r\n                            <div class=\"form__group\">\r\n                                <input\r\n                                    type=\"password\"\r\n                                    class=\"form__input\"\r\n                                    placeholder=\"Password\"\r\n                                    required\r\n                                    id=\"password\"\r\n                                    onChange={hadleChange}\r\n                                    value={userDetails.password}\r\n                                />\r\n                                <label for=\"email\" class=\"form__label\">Password</label>\r\n                            </div>\r\n                            <div class=\"form__group u-margin-bottom-medium\">\r\n                                <div class=\"form__radio-group\">\r\n                                    <input\r\n                                        type=\"radio\"\r\n                                        class=\"form__radio-input\"\r\n                                        id=\"small\"\r\n                                        name=\"size\"\r\n                                    />\r\n                                    <label for=\"small\" class=\"form__radio-label\">\r\n                                        <span class=\"form__radio-button\"></span>remember me</label>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"form__group d-flex\">\r\n                                <button type=\"submit\" class=\"btn btn--green u-center-text\">\r\n                                    Login&rarr;\r\n                                </button>\r\n                                <Link type=\"submit\" class=\"btn  u-center-text\" to='/register'>\r\n                                    register\r\n                                </Link>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default withRouter(LoginPage);","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\IndexPage.jsx",["243"],"import React from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nconst IndexPage = (props) => {\r\n  const history = useHistory()\r\n  React.useEffect(() => {\r\n    const token = localStorage.getItem(\"token\");\r\n    console.log(token);\r\n    if (token) {\r\n      history.push(\"/conversations\");\r\n    } else {\r\n      history.push(\"/login\");\r\n    }\r\n   \r\n  }, []);\r\n  return <div></div>;\r\n};\r\n\r\nexport default IndexPage;","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\GroupPage.jsx",["244","245","246"],"import React, { useState, useEffect } from 'react'\r\nimport Multiselect from 'multiselect-react-dropdown';\r\nimport Card from '../components/UIElemets/Card'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { addConversation } from '../DAL/index'\r\nimport { fetchUsers } from '../redux/contacts/actions'\r\nexport default function GroupPage() {\r\n    const dispatch = useDispatch()\r\n    const [selectedValues, setSelectedValues] = useState(true)\r\n    const [name, setName] = useState('')\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const history = useHistory()\r\n    const userId = localStorage.getItem('userId')\r\n    const userName = localStorage.getItem('userName')\r\n    const { users } = useSelector(state => state.contacts)\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const result = await addConversation(name, [...selectedValues, { name: userName, userId }], userId)\r\n        if (!result.message) {\r\n            history.push(`/chatroom`)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (users.length || !users) dispatch(fetchUsers())\r\n    }, []\r\n    )\r\n    const hadleChange = (e) => {\r\n        setName(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"form-control\">\r\n                    <label htmlFor=\"name\">group Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        placeholder=\"sport room\"\r\n                        onChange={hadleChange}\r\n                    />\r\n                </div>\r\n                <Multiselect options={users}\r\n                    selectedValue={users}\r\n                    onSelect={(data) => { setSelectedValues(data) }}\r\n                    onRemove={(data) => { setSelectedValues(data) }}\r\n                    displayValue={'name'}\r\n                />\r\n                <button type=\"submit\" >Create</button>\r\n            </form>\r\n        </Card >\r\n    )\r\n}\r\n","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\Register.jsx",["247","248","249","250","251"],"import React, { useEffect, useState } from \"react\";\r\nimport * as Yup from 'yup'\r\nimport { useFormik } from \"formik\";\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { login, signup } from '../redux/user/actions'\r\nimport { Spinner } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom'\r\nconst Register = () => {\r\n    const { user, error, loading } = useSelector(state => state.user)\r\n    const dispatch = useDispatch()\r\n    const SUPPORTED_FORMATS = [\"jpg\", \"jpeg\", \"gif\", \"png\", \"webp\"];\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            confirmPassword: \"\",\r\n            profileImage: \"\"\r\n        },\r\n        validationSchema: Yup.object({\r\n            firstName: Yup.string()\r\n                .max(20, 'Must be 15 characters or less')\r\n                .min(3)\r\n                .required('please enter your first name'),\r\n            lastName: Yup.string()\r\n                .max(20, 'Must be 20 characters or less')\r\n                .min(3)\r\n                .required('please enter your last name'),\r\n            email: Yup.string()\r\n                .email('Email is invalid')\r\n                .required('Email is required'),\r\n            password: Yup.string()\r\n                .min(8, 'Password must be at least 8 charaters')\r\n                .required('Password is required'),\r\n            confirmPassword: Yup.string()\r\n                .oneOf([Yup.ref('password'), null], 'Password musts match')\r\n                .required('Confirm password is required'),\r\n            profileImage: Yup.mixed().required(\"You need to provide a file\").test(\"fileFormat\",\r\n                \"Unsupported Format, valid formats: png,jpeg,gif,jpg\",\r\n                value => value && SUPPORTED_FORMATS.includes(value.split('.')[1])),\r\n        }),\r\n        onSubmit: (values) => {\r\n            console.log('values', values)\r\n            const data = new FormData();\r\n            data.append(\"userDetails\", JSON.stringify(values))\r\n            data.append('image', formik.values.profileImage)\r\n            dispatch(signup(data,values))\r\n        },\r\n    })\r\n    return <>\r\n        <div class=\"row\">\r\n            <div class=\"book book--register\">\r\n                <div class=\"book__form book__form--register\">\r\n                    <form onSubmit={formik.handleSubmit} enctype=\"multipart/form-data\" class=\"form\" >\r\n                        <div class=\"u-center-text u-margin-bottom-medium\">\r\n                            <h2 class=\"heading-secondary\">Start messaging now</h2>\r\n                            <h2>login</h2>\r\n                            {error && <h3 className='text-danger'>{error}</h3>}\r\n                            {loading && <Spinner animation=\"border\" />}\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-between\">\r\n\r\n                            <div class=\"form__group\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    class=\"form__input\"\r\n                                    required\r\n                                    name=\"firstName\"\r\n                                    id=\"firstName\"\r\n                                    placeholder=\"first name\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.firstName}\r\n                                />\r\n                                <label for=\"firstName\" class=\"form__label\">first name</label>\r\n                                {formik.touched.firstName && formik.errors.firstName ? <small className='text-danger'>{formik.errors.firstName} </small> : \"\"}\r\n                            </div>\r\n                            <div class=\"form__group\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    class=\"form__input\"\r\n                                    required\r\n                                    id=\"lastName\"\r\n                                    name=\"lastName\"\r\n                                    placeholder=\"last name\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.lastName}\r\n                                />\r\n                                <label for=\"lastName\" class=\"form__label\">last name</label>\r\n                                {formik.touched.lastName && formik.errors.lastName ? <small className='text-danger'>{formik.errors.lastName} </small> : \"\"}\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"form__group\">\r\n                            <input\r\n                                type=\"email\"\r\n                                class=\"form__input\"\r\n                                required\r\n                                name='email'\r\n                                id=\"email\"\r\n                                placeholder=\"Email\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.email}\r\n                            />\r\n                            <label for=\"email\" class=\"form__label\">Email</label>\r\n                            {formik.touched.email && formik.errors.email ? <small className='text-danger'>{formik.errors.email} </small> : \"\"}\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-between\">\r\n\r\n                            <div class=\"form__group\">\r\n                                <input\r\n                                    type=\"password\"\r\n                                    class=\"form__input\"\r\n                                    placeholder=\"Password\"\r\n                                    required\r\n                                    id=\"password\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.password}\r\n                                />\r\n                                <label for=\"password\" class=\"form__label\">Password</label>\r\n                                {formik.touched.password && formik.errors.password ? <small className='text-danger'>{formik.errors.password} </small> : \"\"}\r\n                            </div>\r\n                            <div class=\"form__group\">\r\n                                <input\r\n                                    type=\"password\"\r\n                                    class=\"form__input\"\r\n                                    placeholder=\"confirm Password\"\r\n                                    required\r\n                                    name='confirmPassword'\r\n                                    id=\"confirmPassword\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.confirmPassword}\r\n                                />\r\n                                <label for=\"confirmPassword\" class=\"form__label\">confirm Password</label>\r\n                                {formik.touched.confirmPassword && formik.errors.confirmPassword ? <small className='text-danger'>{formik.errors.confirmPassword} </small> : \"\"}\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"form__group\">\r\n                            <input\r\n                                type=\"file\"\r\n                                class=\"form__input\"\r\n                                placeholder=\"confirm Password\"\r\n                                required\r\n                                name='profileImage'\r\n                                id=\"confirmPassword\"\r\n                                onChange={formik.handleChange}\r\n                                value={formik.values.profileImage}\r\n                            />\r\n                            <label for=\"confirmPassword\" class=\"form__label\">profile Image</label>\r\n                            {formik.touched.profileImage && formik.errors.profileImage ? <p className='text-danger'>{formik.errors.profileImage} </p> : \"\"}\r\n\r\n                        </div>\r\n                        <div class=\"form__group d-flex justify-content-around\">\r\n                            <button type=\"submit\" class=\"btn btn--green u-center-text\">\r\n                                Register&rarr;\r\n                            </button>\r\n                            <Link type=\"submit\" class=\"btn  u-center-text\" to='/login'>\r\n                                Login\r\n                            </Link>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </>\r\n}\r\nexport default Register","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\Contacts.jsx",["252"],"import { useEffect, useState } from \"react\"\r\nimport { Spinner } from \"react-bootstrap\"\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { fetchUsers, appendToContacts } from '../redux/contacts/actions'\r\nconst Contacts = () => {\r\n    const dispatch = useDispatch()\r\n    const { users, error, loading, success } = useSelector(state => state.contacts)\r\n    const [userId, setUserId] = useState('')\r\n    const [name, setName] = useState('')\r\n    useEffect(() => {\r\n        dispatch(fetchUsers())\r\n    }, [])\r\n\r\n    const addContact = (e) => {\r\n        e.preventDefault()\r\n        dispatch(appendToContacts(name, userId))\r\n    }\r\n\r\n    return <>\r\n        <div>\r\n            <a href=\"#popup\" className=\"btn\">add contact</a>\r\n        </div>\r\n\r\n        {\r\n            users && users.map((user, i) => {\r\n                return <li key={i} className={user.cName || 'nav-list'}>\r\n                    <p>\r\n                        {user.icon}\r\n                        <span>{user.name}</span>\r\n                    </p>\r\n                </li>\r\n            })\r\n\r\n        }\r\n\r\n        <div className=\"popup\" id=\"popup\">\r\n            <form onSubmit={addContact}>\r\n                <div className=\"popup__content\">\r\n                    <div className=\"popup__right\">\r\n                        <a href=\"#section-tours\" className=\"popup__close\">&times;</a>\r\n                        <h2 className=\"heading-secondary u-margin-bottom-small\">add contact</h2>\r\n                        {error && <h4 className=\"text-danger\">{error}</h4>}\r\n                        {loading && <Spinner animation=\"border\" />}\r\n                        {success && <h4>the user inserted successfuly</h4>}\r\n                        <div className=\"form__group\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form__input\"\r\n                                placeholder=\"groupe Name\"\r\n                                required\r\n                                id=\"group-name\"\r\n                                onChange={e => setName(e.target.value)}\r\n                            />\r\n                            <label for=\"group-name\" className=\"form__label\">contact Name</label>\r\n                        </div>\r\n                        <div className=\"form__group\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form__input\"\r\n                                placeholder=\"user ID\"\r\n                                required\r\n                                id=\"userId\"\r\n                                onChange={e => setUserId(e.target.value)}\r\n                            />\r\n                            <label for=\"userId\" className=\"form__label\">user ID</label>\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn--green u-center-text\">\r\n                            Add&rarr;\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </>\r\n\r\n}\r\nexport default Contacts","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\LiveChat.jsx",["253","254","255","256","257","258"],"import React, { useState, useEffect } from 'react'\r\nimport socketIOClient from 'socket.io-client'\r\nimport { afterPostMessage } from '../redux/conversations/actions'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport axios from 'axios'\r\nfunction LiveChat() {\r\n    let socket\r\n    const [message, setMessage] = useState('')\r\n    const [typing, setTyping] = useState(false)\r\n    const { messages, members, loading, error, name2, currentRoom } = useSelector(state => state.conversations)\r\n    const { user } = useSelector(state => state.user)\r\n    const dispatch = useDispatch()\r\n    const userId = localStorage.getItem('userId')\r\n    const name = localStorage.getItem('userName')\r\n    const chatroomId = currentRoom\r\n    useEffect(() => {\r\n        socket = socketIOClient(\"http://localhost:5000\");\r\n        if (socket) {\r\n            socket.emit(\"joinRoom\", {\r\n                chatroomId, userId\r\n            });\r\n\r\n            socket.on(\"newMessage\", ({ newMessage }) => {\r\n                dispatch(afterPostMessage(newMessage))\r\n            });\r\n            socket.on(\"typing\", user => {\r\n                setTyping(`${user} is typing...`)\r\n            })\r\n            socket.emit(\"joinRoom\", {\r\n                chatroomId, userId\r\n            });\r\n        }\r\n        return () => {\r\n            //Component Unmount\r\n            if (socket) {\r\n                socket.emit(\"leaveRoom\", {\r\n                    chatroomId,\r\n                });\r\n            }\r\n        };\r\n    }, [messages]);\r\n\r\n    useEffect(() => {\r\n\r\n        setTimeout(() => {\r\n            setTyping(false)\r\n        }, 5000)\r\n    }, [typing])\r\n    const sendUserAction = (e) => {\r\n        const user = localStorage.getItem('userName')\r\n        setMessage(e.target.value)\r\n        if (socket) {\r\n            socket.emit('typing', user)\r\n        }\r\n    }\r\n    const sendMessage = (e) => {\r\n        e.preventDefault()\r\n        const chatMessage = {\r\n            chatroomId: currentRoom,\r\n            message: { userId: localStorage.getItem('userId'), name, content: message, date: Date.now() },\r\n            userId: localStorage.getItem('userId')\r\n        }\r\n        axios.post('http://localhost:5000/api/conversation/send', { cahtId: currentRoom, chat: message }).then(response => console.log(response))\r\n        // if (socket) {\r\n        //     socket.emit(\"chatroomMessage\", chatMessage);\r\n        //     setMessage(\"\");\r\n        // }\r\n    };\r\n    return (\r\n        <>\r\n            {loading && <li>loading</li>}\r\n            {error && <li>{error}</li>}\r\n            {name && <h2>{name}</h2>}\r\n            {typing && <p>{typing}</p>}\r\n            {messages.length === 0 ? <p>no messages yet</p> : (<div className=\"messages\">\r\n                {messages.map((message, i) => (\r\n                    <div className=\"row\">\r\n                        <div className=\"story\">\r\n                            <figure className=\"story__shape\">\r\n                                <img src={message.image} alt={`${message.name}'s img`} class=\"story__img\" />\r\n                                <figcaption className=\"story__caption\">{message.name}</figcaption>\r\n                            </figure >\r\n                            <div className=\"story__text\">\r\n                                <p>\r\n                                    {message.content}\r\n                                </p>\r\n                            </div>\r\n                            <p>\r\n                                {message.userId === userId ? message.views ? 'VV' : 'V' : ''}\r\n                            </p>\r\n                        </div >\r\n                    </div >\r\n                ))\r\n                }\r\n            </div >)}\r\n\r\n            <form className=\"message-form\" onSubmit={sendMessage}>\r\n                <input\r\n                    className=\"message-input\"\r\n                    placeholder=\"Send a message...\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                />\r\n                <label htmlFor=\"upload-button\">\r\n                    <span className=\"image-button\">\r\n\r\n                    </span>\r\n                </label>\r\n                {/* <input\r\n                    type=\"file\"\r\n                    multiple={false}\r\n                    id=\"upload-button\"\r\n                    style={{ display: 'none' }}\r\n                    onChange={handleUpload.bind(this)}\r\n                /> */}\r\n                <button type=\"submit\" className=\"send-button\">\r\n                    send\r\n                </button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LiveChat\r\n","C:\\Users\\User\\Documents\\chatapp\\client\\src\\components\\Navigation\\Navbar.jsx",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\components\\Navigation\\NavBar.jsx",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\components\\UIElemets\\Card.jsx",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\Auth.jsx",["259"],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\NewContact.jsx",["260"],"import React, { useState, useEffect } from 'react'\r\nimport { addToContacts } from '../DAL/index'\r\nexport default function NewContact() {\r\n    const userId = localStorage.getItem('userId')\r\n    const [userDetails, setUserSetails] = useState({})\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        addToContacts(userId, { ...userDetails })\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        setUserSetails({ ...userDetails, [e.target.id]: e.target.value })\r\n    }\r\n    return (\r\n        <div class=\"row\">\r\n            <div class=\"book\">\r\n                <div class=\"book__form\">\r\n                    <form onSubmit={handleSubmit} class=\"form\">\r\n                        <div class=\"u-center-text u-margin-bottom-medium\">\r\n                            <h2 class=\"heading-secondary\">add contact</h2>\r\n                            {/* {errorMessage && <h3 className='text-danger'>{errorMessage}</h3>}\r\n                            {loading && <Spinner animation=\"border\" />} */}\r\n                        </div>\r\n                        <div class=\"form__group\">\r\n                            <input\r\n                                type=\"text\"\r\n                                class=\"form__input\"\r\n                                required\r\n                                id=\"name\"\r\n                                placeholder=\"name\"\r\n                                onChange={handleChange}\r\n                                value={userDetails.name}\r\n                            />\r\n                            <label for=\"name\" class=\"form__label\">name</label>\r\n                        </div>\r\n                        <div class=\"form__group\">\r\n                            <input\r\n                                type=\"text\"\r\n                                class=\"form__input\"\r\n                                placeholder=\"user id\"\r\n                                required\r\n                                id=\"id\"\r\n                                onChange={handleChange}\r\n                                value={userDetails.id}\r\n                            />\r\n                            <label for=\"id\" class=\"form__label\">ID</label>\r\n                        </div>\r\n\r\n                        <div class=\"form__group d-flex\">\r\n                            <button type=\"submit\" class=\"btn btn--green u-center-text\">\r\n                                Add&rarr;\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n","C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\chat\\ChatFeed.jsx",["261","262","263","264","265","266","267","268","269","270","271"],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\chat\\MyMessage.jsx",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\chat\\TheirMessage.jsx",[],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\pages\\chat\\MessageForm.jsx",["272","273","274","275","276"],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\components\\Navigation\\SidebarData.js",["277"],"import React from 'react';\r\nimport * as FaIcons from 'react-icons/fa';\r\nimport * as AiIcons from 'react-icons/ai';\r\nimport * as IoIcons from 'react-icons/io';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const SidebarData = [\r\n    {\r\n        title: 'Home',\r\n        path: '/',\r\n        icon: <AiIcons.AiFillHome />,\r\n        cName: 'nav-text'\r\n    },\r\n    {\r\n        title: 'Login',\r\n        path: '/register',\r\n        icon: <IoIcons.IoIosPaper />,\r\n        cName: 'nav-text'\r\n    },\r\n    {\r\n        title: 'Products',\r\n        path: '/products',\r\n        icon: <FaIcons.FaCartPlus />,\r\n        cName: 'nav-text'\r\n    },\r\n    {\r\n        title: 'Contacts',\r\n        path: '/contacts',\r\n        icon: <IoIcons.IoMdPeople />,\r\n        cName: 'nav-text'\r\n    },\r\n    {\r\n        title: 'Messages',\r\n        path: '/conversations',\r\n        icon: <FaIcons.FaEnvelopeOpenText />,\r\n        cName: 'nav-text'\r\n    },\r\n    {\r\n        title: 'Support',\r\n        path: '/newcontact',\r\n        icon: <IoIcons.IoMdHelpCircle />,\r\n        cName: 'nav-text'\r\n    },\r\n    {\r\n        title: 'Support',\r\n        path: '/newcontact',\r\n        icon: <IoIcons.IoMdHelpCircle />,\r\n        cName: 'nav-text'\r\n    },\r\n    {\r\n        title: 'Support',\r\n        path: '/newcontact',\r\n        icon: <IoIcons.IoMdHelpCircle />,\r\n        cName: 'nav-text'\r\n    }\r\n];","C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\socket\\reducer.js",["278"],"C:\\Users\\User\\Documents\\chatapp\\client\\src\\redux\\socket\\actions.js",["279","280"],{"ruleId":"281","severity":1,"message":"282","line":6,"column":20,"nodeType":"283","messageId":"284","endLine":6,"endColumn":31},{"ruleId":"285","replacedBy":"286"},{"ruleId":"287","replacedBy":"288"},{"ruleId":"281","severity":1,"message":"289","line":1,"column":17,"nodeType":"283","messageId":"284","endLine":1,"endColumn":25},{"ruleId":"281","severity":1,"message":"290","line":1,"column":27,"nodeType":"283","messageId":"284","endLine":1,"endColumn":36},{"ruleId":"281","severity":1,"message":"291","line":5,"column":8,"nodeType":"283","messageId":"284","endLine":5,"endColumn":17},{"ruleId":"281","severity":1,"message":"292","line":6,"column":8,"nodeType":"283","messageId":"284","endLine":6,"endColumn":10},{"ruleId":"281","severity":1,"message":"293","line":13,"column":8,"nodeType":"283","messageId":"284","endLine":13,"endColumn":18},{"ruleId":"281","severity":1,"message":"294","line":7,"column":7,"nodeType":"283","messageId":"284","endLine":7,"endColumn":18},{"ruleId":"281","severity":1,"message":"295","line":67,"column":11,"nodeType":"283","messageId":"284","endLine":67,"endColumn":23},{"ruleId":"281","severity":1,"message":"296","line":1,"column":27,"nodeType":"283","messageId":"284","endLine":1,"endColumn":37},{"ruleId":"281","severity":1,"message":"297","line":4,"column":10,"nodeType":"283","messageId":"284","endLine":4,"endColumn":17},{"ruleId":"281","severity":1,"message":"298","line":10,"column":19,"nodeType":"283","messageId":"284","endLine":10,"endColumn":24},{"ruleId":"281","severity":1,"message":"299","line":14,"column":26,"nodeType":"283","messageId":"284","endLine":14,"endColumn":41},{"ruleId":"300","severity":1,"message":"301","line":26,"column":8,"nodeType":"302","endLine":26,"endColumn":10,"suggestions":"303"},{"ruleId":"281","severity":1,"message":"304","line":129,"column":7,"nodeType":"283","messageId":"284","endLine":129,"endColumn":22},{"ruleId":"281","severity":1,"message":"305","line":134,"column":7,"nodeType":"283","messageId":"284","endLine":134,"endColumn":25},{"ruleId":"285","replacedBy":"306"},{"ruleId":"287","replacedBy":"307"},{"ruleId":"281","severity":1,"message":"308","line":3,"column":10,"nodeType":"283","messageId":"284","endLine":3,"endColumn":14},{"ruleId":"281","severity":1,"message":"297","line":4,"column":10,"nodeType":"283","messageId":"284","endLine":4,"endColumn":17},{"ruleId":"300","severity":1,"message":"309","line":15,"column":8,"nodeType":"302","endLine":15,"endColumn":10,"suggestions":"310"},{"ruleId":"281","severity":1,"message":"311","line":16,"column":9,"nodeType":"283","messageId":"284","endLine":16,"endColumn":15},{"ruleId":"281","severity":1,"message":"312","line":17,"column":11,"nodeType":"283","messageId":"284","endLine":17,"endColumn":26},{"ruleId":"281","severity":1,"message":"313","line":18,"column":12,"nodeType":"283","messageId":"284","endLine":18,"endColumn":21},{"ruleId":"281","severity":1,"message":"314","line":19,"column":11,"nodeType":"283","messageId":"284","endLine":19,"endColumn":23},{"ruleId":"300","severity":1,"message":"315","line":38,"column":15,"nodeType":"316","endLine":45,"endColumn":6},{"ruleId":"281","severity":1,"message":"317","line":12,"column":12,"nodeType":"283","messageId":"284","endLine":12,"endColumn":24},{"ruleId":"281","severity":1,"message":"299","line":12,"column":26,"nodeType":"283","messageId":"284","endLine":12,"endColumn":41},{"ruleId":"300","severity":1,"message":"315","line":23,"column":15,"nodeType":"316","endLine":26,"endColumn":6},{"ruleId":"300","severity":1,"message":"318","line":26,"column":8,"nodeType":"302","endLine":26,"endColumn":10,"suggestions":"319"},{"ruleId":"281","severity":1,"message":"290","line":1,"column":17,"nodeType":"283","messageId":"284","endLine":1,"endColumn":26},{"ruleId":"281","severity":1,"message":"289","line":1,"column":28,"nodeType":"283","messageId":"284","endLine":1,"endColumn":36},{"ruleId":"281","severity":1,"message":"297","line":4,"column":10,"nodeType":"283","messageId":"284","endLine":4,"endColumn":17},{"ruleId":"281","severity":1,"message":"320","line":5,"column":10,"nodeType":"283","messageId":"284","endLine":5,"endColumn":15},{"ruleId":"281","severity":1,"message":"321","line":7,"column":13,"nodeType":"283","messageId":"284","endLine":7,"endColumn":17},{"ruleId":"281","severity":1,"message":"298","line":7,"column":19,"nodeType":"283","messageId":"284","endLine":7,"endColumn":24},{"ruleId":"281","severity":1,"message":"290","line":1,"column":10,"nodeType":"283","messageId":"284","endLine":1,"endColumn":19},{"ruleId":"281","severity":1,"message":"289","line":1,"column":21,"nodeType":"283","messageId":"284","endLine":1,"endColumn":29},{"ruleId":"281","severity":1,"message":"292","line":2,"column":8,"nodeType":"283","messageId":"284","endLine":2,"endColumn":10},{"ruleId":"281","severity":1,"message":"322","line":4,"column":10,"nodeType":"283","messageId":"284","endLine":4,"endColumn":21},{"ruleId":"281","severity":1,"message":"297","line":5,"column":10,"nodeType":"283","messageId":"284","endLine":5,"endColumn":17},{"ruleId":"281","severity":1,"message":"323","line":10,"column":23,"nodeType":"283","messageId":"284","endLine":10,"endColumn":30},{"ruleId":"281","severity":1,"message":"324","line":10,"column":48,"nodeType":"283","messageId":"284","endLine":10,"endColumn":53},{"ruleId":"281","severity":1,"message":"321","line":11,"column":13,"nodeType":"283","messageId":"284","endLine":11,"endColumn":17},{"ruleId":"300","severity":1,"message":"325","line":18,"column":18,"nodeType":"326","endLine":18,"endColumn":65},{"ruleId":"281","severity":1,"message":"327","line":2,"column":8,"nodeType":"283","messageId":"284","endLine":2,"endColumn":13},{"ruleId":"281","severity":1,"message":"308","line":4,"column":10,"nodeType":"283","messageId":"284","endLine":4,"endColumn":14},{"ruleId":"281","severity":1,"message":"297","line":5,"column":10,"nodeType":"283","messageId":"284","endLine":5,"endColumn":17},{"ruleId":"281","severity":1,"message":"328","line":9,"column":9,"nodeType":"283","messageId":"284","endLine":9,"endColumn":24},{"ruleId":"281","severity":1,"message":"329","line":9,"column":26,"nodeType":"283","messageId":"284","endLine":9,"endColumn":46},{"ruleId":"300","severity":1,"message":"309","line":20,"column":8,"nodeType":"302","endLine":20,"endColumn":10,"suggestions":"330"},{"ruleId":"300","severity":1,"message":"331","line":29,"column":8,"nodeType":"302","endLine":29,"endColumn":10,"suggestions":"332"},{"ruleId":"281","severity":1,"message":"333","line":5,"column":10,"nodeType":"283","messageId":"284","endLine":5,"endColumn":25},{"ruleId":"281","severity":1,"message":"334","line":6,"column":10,"nodeType":"283","messageId":"284","endLine":6,"endColumn":18},{"ruleId":"281","severity":1,"message":"335","line":6,"column":20,"nodeType":"283","messageId":"284","endLine":6,"endColumn":26},{"ruleId":"281","severity":1,"message":"336","line":9,"column":8,"nodeType":"283","messageId":"284","endLine":9,"endColumn":12},{"ruleId":"281","severity":1,"message":"337","line":10,"column":8,"nodeType":"283","messageId":"284","endLine":10,"endColumn":16},{"ruleId":"300","severity":1,"message":"301","line":29,"column":8,"nodeType":"302","endLine":29,"endColumn":10,"suggestions":"338"},{"ruleId":"300","severity":1,"message":"339","line":36,"column":8,"nodeType":"302","endLine":36,"endColumn":30,"suggestions":"340"},{"ruleId":"281","severity":1,"message":"341","line":47,"column":11,"nodeType":"283","messageId":"284","endLine":47,"endColumn":28},{"ruleId":"300","severity":1,"message":"342","line":14,"column":6,"nodeType":"302","endLine":14,"endColumn":8,"suggestions":"343"},{"ruleId":"281","severity":1,"message":"317","line":12,"column":12,"nodeType":"283","messageId":"284","endLine":12,"endColumn":24},{"ruleId":"281","severity":1,"message":"299","line":12,"column":26,"nodeType":"283","messageId":"284","endLine":12,"endColumn":41},{"ruleId":"300","severity":1,"message":"344","line":28,"column":8,"nodeType":"302","endLine":28,"endColumn":10,"suggestions":"345"},{"ruleId":"281","severity":1,"message":"290","line":1,"column":17,"nodeType":"283","messageId":"284","endLine":1,"endColumn":26},{"ruleId":"281","severity":1,"message":"289","line":1,"column":28,"nodeType":"283","messageId":"284","endLine":1,"endColumn":36},{"ruleId":"281","severity":1,"message":"297","line":4,"column":10,"nodeType":"283","messageId":"284","endLine":4,"endColumn":17},{"ruleId":"281","severity":1,"message":"320","line":5,"column":10,"nodeType":"283","messageId":"284","endLine":5,"endColumn":15},{"ruleId":"281","severity":1,"message":"321","line":9,"column":13,"nodeType":"283","messageId":"284","endLine":9,"endColumn":17},{"ruleId":"300","severity":1,"message":"309","line":12,"column":8,"nodeType":"302","endLine":12,"endColumn":10,"suggestions":"346"},{"ruleId":"281","severity":1,"message":"323","line":10,"column":23,"nodeType":"283","messageId":"284","endLine":10,"endColumn":30},{"ruleId":"281","severity":1,"message":"324","line":10,"column":48,"nodeType":"283","messageId":"284","endLine":10,"endColumn":53},{"ruleId":"281","severity":1,"message":"321","line":11,"column":13,"nodeType":"283","messageId":"284","endLine":11,"endColumn":17},{"ruleId":"300","severity":1,"message":"325","line":17,"column":18,"nodeType":"326","endLine":17,"endColumn":57},{"ruleId":"281","severity":1,"message":"347","line":49,"column":11,"nodeType":"283","messageId":"284","endLine":49,"endColumn":25},{"ruleId":"281","severity":1,"message":"348","line":58,"column":15,"nodeType":"283","messageId":"284","endLine":58,"endColumn":26},{"ruleId":"281","severity":1,"message":"349","line":6,"column":23,"nodeType":"283","messageId":"284","endLine":6,"endColumn":35},{"ruleId":"281","severity":1,"message":"290","line":1,"column":27,"nodeType":"283","messageId":"284","endLine":1,"endColumn":36},{"ruleId":"281","severity":1,"message":"290","line":1,"column":10,"nodeType":"283","messageId":"284","endLine":1,"endColumn":19},{"ruleId":"281","severity":1,"message":"350","line":5,"column":23,"nodeType":"283","messageId":"284","endLine":5,"endColumn":34},{"ruleId":"281","severity":1,"message":"292","line":6,"column":10,"nodeType":"283","messageId":"284","endLine":6,"endColumn":12},{"ruleId":"281","severity":1,"message":"351","line":9,"column":11,"nodeType":"283","messageId":"284","endLine":9,"endColumn":17},{"ruleId":"281","severity":1,"message":"352","line":10,"column":13,"nodeType":"283","messageId":"284","endLine":10,"endColumn":24},{"ruleId":"281","severity":1,"message":"353","line":11,"column":12,"nodeType":"283","messageId":"284","endLine":11,"endColumn":18},{"ruleId":"281","severity":1,"message":"354","line":11,"column":20,"nodeType":"283","messageId":"284","endLine":11,"endColumn":29},{"ruleId":"281","severity":1,"message":"323","line":13,"column":23,"nodeType":"283","messageId":"284","endLine":13,"endColumn":30},{"ruleId":"281","severity":1,"message":"355","line":13,"column":32,"nodeType":"283","messageId":"284","endLine":13,"endColumn":39},{"ruleId":"281","severity":1,"message":"298","line":13,"column":41,"nodeType":"283","messageId":"284","endLine":13,"endColumn":46},{"ruleId":"281","severity":1,"message":"356","line":34,"column":19,"nodeType":"283","messageId":"284","endLine":34,"endColumn":33},{"ruleId":"281","severity":1,"message":"327","line":4,"column":8,"nodeType":"283","messageId":"284","endLine":4,"endColumn":13},{"ruleId":"281","severity":1,"message":"292","line":5,"column":10,"nodeType":"283","messageId":"284","endLine":5,"endColumn":12},{"ruleId":"281","severity":1,"message":"357","line":15,"column":38,"nodeType":"283","messageId":"284","endLine":15,"endColumn":46},{"ruleId":"300","severity":1,"message":"358","line":38,"column":8,"nodeType":"302","endLine":38,"endColumn":10,"suggestions":"359"},{"ruleId":"281","severity":1,"message":"360","line":53,"column":11,"nodeType":"283","messageId":"284","endLine":53,"endColumn":23},{"ruleId":"281","severity":1,"message":"282","line":5,"column":10,"nodeType":"283","messageId":"284","endLine":5,"endColumn":21},{"ruleId":"281","severity":1,"message":"361","line":2,"column":9,"nodeType":"283","messageId":"284","endLine":2,"endColumn":23},{"ruleId":"281","severity":1,"message":"361","line":2,"column":9,"nodeType":"283","messageId":"284","endLine":2,"endColumn":23},{"ruleId":"281","severity":1,"message":"362","line":4,"column":5,"nodeType":"283","messageId":"284","endLine":4,"endColumn":19},"no-unused-vars","'useSelector' is defined but never used.","Identifier","unusedVar","no-native-reassign",["363"],"no-negated-in-lhs",["364"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'IndexPage' is defined but never used.","'io' is defined but never used.","'NewContact' is defined but never used.","'userReducer' is assigned a value but never used.","'participants' is assigned a value but never used.","'useContext' is defined but never used.","'connect' is defined but never used.","'error' is assigned a value but never used.","'setErrorMessage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'setupSocket', and 'user'. Either include them or remove the dependency array. If 'setupSocket' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["365"],"'mapStateToProps' is assigned a value but never used.","'mapDispatchToProps' is assigned a value but never used.",["363"],["364"],"'Link' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["366"],"'socket' is defined but never used.","'CONNECTION_PORT' is assigned a value but never used.","'chatrooms' is assigned a value but never used.","'getChatrooms' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'errorMessage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["367"],"'login' is defined but never used.","'user' is assigned a value but never used.","'getRoomChat' is defined but never used.","'members' is assigned a value but never used.","'name2' is assigned a value but never used.","Assignments to the 'socket' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'axios' is defined but never used.","'addConversation' is assigned a value but never used.","'getUserConversations' is assigned a value but never used.",["368"],"React Hook useEffect has missing dependencies: 'dispatch' and 'users?.length'. Either include them or remove the dependency array.",["369"],"'FontAwesomeIcon' is defined but never used.","'faCoffee' is defined but never used.","'faSync' is defined but never used.","'Card' is defined but never used.","'Register' is defined but never used.",["370"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["371"],"'switchModehandler' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["372"],"React Hook useEffect has missing dependencies: 'dispatch' and 'users'. Either include them or remove the dependency array.",["373"],["374"],"'sendUserAction' is assigned a value but never used.","'chatMessage' is assigned a value but never used.","'setIsLogMode' is assigned a value but never used.","'useDispatch' is defined but never used.","'userId' is assigned a value but never used.","'currentRoom' is assigned a value but never used.","'typing' is assigned a value but never used.","'setTyping' is assigned a value but never used.","'loading' is assigned a value but never used.","'lastMessageKey' is assigned a value but never used.","'messages' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'chatroomId', 'dispatch', 'socket', and 'userId'. Either include them or remove the dependency array.",["375"],"'handleSubmit' is assigned a value but never used.","'SOCKET_REQUEST' is assigned a value but never used.","'SOCKET_FAILURE' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"376","fix":"377"},{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},{"desc":"378","fix":"382"},{"desc":"383","fix":"384"},{"desc":"376","fix":"385"},{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},{"desc":"390","fix":"391"},{"desc":"378","fix":"392"},{"desc":"393","fix":"394"},"Update the dependencies array to be: [history, setupSocket, user]",{"range":"395","text":"396"},"Update the dependencies array to be: [dispatch]",{"range":"397","text":"398"},"Update the dependencies array to be: [userId]",{"range":"399","text":"400"},{"range":"401","text":"398"},"Update the dependencies array to be: [dispatch, users?.length]",{"range":"402","text":"403"},{"range":"404","text":"396"},"Update the dependencies array to be: [user, error, loading, history]",{"range":"405","text":"406"},"Update the dependencies array to be: [history]",{"range":"407","text":"408"},"Update the dependencies array to be: [dispatch, users]",{"range":"409","text":"410"},{"range":"411","text":"398"},"Update the dependencies array to be: [chatroomId, dispatch, socket, userId]",{"range":"412","text":"413"},[1033,1035],"[history, setupSocket, user]",[694,696],"[dispatch]",[1128,1130],"[userId]",[976,978],[1190,1192],"[dispatch, users?.length]",[1182,1184],[1348,1370],"[user, error, loading, history]",[360,362],"[history]",[1163,1165],"[dispatch, users]",[515,517],[1436,1438],"[chatroomId, dispatch, socket, userId]"]